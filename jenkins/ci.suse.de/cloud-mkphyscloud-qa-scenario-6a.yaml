- job:
    name: cloud-mkphyscloud-qa-scenario-6a
    node: cloud-mkphyscloud-gate-qa
    description: |
      <b>This job is managed by JJB! Changes must be done in
      <a href='https://github.com/SUSE-Cloud/automation/tree/master/jenkins/ci.suse.de/'>git</a>
      </b>

      This job will redeploy scenario-6a:
        - 7 nodes
        - HA with ipmi (3 nodes)
        - Shared storage on a NFS server (uses qa-provided nfs shares)
        - 4 kvm compute nodes

      It will wipe all machines!

    wrappers:
      - build-name:
          name: '#${BUILD_NUMBER} ${ENV,var="cloudsource"} - qa${ENV,var="hw_number"} ${ENV,var="networkingplugin"}:${ENV,var="networkingmode"}'
    publishers:
      - mkphyscloud-qa-common-publishers

    logrotate:
      numToKeep: 15
      daysToKeep: -1

    parameters:
      - string:
          name: hw_number
          default: "2"
          description: Mandatory, name of the QA cloud server as integer

      - string:
          name: admin_os
          default: sles12sp3
          description: Mandatory, admin node operating system version

      - string:
          name: shared_storage_ip
          default: 10.162.66.1
          description: Mandatory, shared storage server IP

      - string:
          name: repo_owner
          default: SUSE-Cloud
          description: Mandatory, automation repo owner/organization

      - string:
          name: branch
          default: master
          description: Mandatory, automation repo branch

      - string:
          name: automation_repo
          default: github.com/$repo_owner/automation#$branch
          description: Mandatory, automation repo URL

      - string:
          name: tempest
          default: smoke
          description: Optional, specify what tempest test(s) to run, e.g. smoke, smoke|full or smoke|defcore

      - bool:
          name: rally-tests
          default: false
          description: Optional, Run rally  tests

      - string:
          name: ssl_type
          default: no-ssl
          description: "Mandatory, set the SSL configuration for the cloud, available options: no-ssl, ssl-insecure, ssl"

      - string:
          name: cloud_version
          default: "8"
          description: Mandatory, version of the cloud to be installed as integer

      - string:
          name: scenario_file
          default: qa-scenario-6a.yaml
          description: Scenario yaml file name

      # Parameters for qa_crowbarsetup.sh
      - string:
          name: cloudsource
          default: develcloud$cloud_version

      - string:
          name: TESTHEAD
          default: "1"
          description: if non-empty, test latest version from Devel:Cloud Stagin

      - string:
          name: hacloud
          default: "1"
          description: By default we do not want HA configured and installed

      - string:
          name: clusterconfig
          default: services=2
          description: HA configuration for clusters. Make sense only if hacloud=1

      - string:
          name: networkingplugin
          default: linuxbridge
          description: |
               networking plugin to be used by neutron, available option is openvswitch:gre,vlan,vxlan / linuxbridge:vlan

      - string:
          name: networkingmode
          default: vlan
          description: networking mode to be used by neutron , available option is gre,vlan,vxlan

      - string:
          name: nodenumber
          default: "7"
          description: Number of nodes to use; is scenario specific

      - string:
          name: want_ipmi
          default: "1"

      - string:
          name: commands
          default: addupdaterepo prepareinstallcrowbar runupdate bootstrapcrowbar installcrowbar allocate waitcloud setup_aliases batch
          description: All the steps that needs to be completed to have cloud installed

      - string:
          name: want_test_updates
          default: 0
          description: Use updates-test repos for all SUSE products

      - text:
          name: UPDATEREPOS
          default:
          description: Update repositories (one URL per line)

    builders:
      - shell: |
          #!/bin/bash -x
          admin=crowbar$hw_number
          cloud=qa$hw_number

          if [ ! -z "$UPDATEREPOS" ] ; then
            export UPDATEREPOS=${UPDATEREPOS//$'\n'/+}
          fi
          export artifacts_dir=$WORKSPACE/.artifacts
          rm -rf $artifacts_dir
          mkdir -p $artifacts_dir
          touch $artifacts_dir/.ignore

          # destroy the old admin VM if any and spawn a clean new admin VM afterwards
          # /usr/local/sbin/freshadminvm
          freshadminvm $admin $admin_os
          sleep 100 # time for the admin VM to boot

          # wipe out shared NFS that are being used by this deployment:
          # /usr/local/sbin/wipe_nfs_shares
          ssh root@localhost "wipe_nfs_shares qa$hw_number"

          # clone, fetch and update the automation repo
          # /usr/local/sbin/update_automation
          update_automation

          # put variables needed during the build process into mkcloud.config file
          env | grep -e networking -e libvirt -e cloud > mkcloud.config

          echo "want_magnum_proposal=1" >> mkcloud.config
          echo "ostestroptions=--regex\ '^magnum.tests.functional.api'" >> mkcloud.config

          # copy scripts/ dir onto the admin node in /root/scripts
          scp -r ~/github.com/$repo_owner/automation/scripts mkcloud.config root@$admin:

          # copy scenario file onto the admin node in /root/scenario.yml
          scp ~/github.com/$repo_owner/automation/scripts/scenarios/cloud$cloud_version/qa/$ssl_type/$scenario_file \
              root@$admin:scenario.yml

          ret=0

          ssh root@$admin <<EOF
              set -e
              export cloud=$cloud ;
              export hw_number=$hw_number ;
              export UPDATEREPOS=$UPDATEREPOS ;
              export UPDATEBEFOREINSTALL=$UPDATEBEFOREINSTALL ;
              export TESTHEAD=$TESTHEAD ;
              export cloudsource=$cloudsource ;
              export nodenumber=$nodenumber ;
              export hacloud=$hacloud ;
              export clusterconfig=$clusterconfig ;
              export want_magnum_proposal=1 ;
              export want_ceph=0
              export runner_url=$runner_url ;
              export scenario_url=$scenario_url ;
              export want_node_aliases=controller=3,kvm=4
              export want_node_roles=controller=3,compute=4
              export networkingplugin=$networkingplugin ;
              export networkingmode=$networkingmode ;
              export scenario=/root/scenario.yml;
              export commands="$commands"


              sed -i -e "s,##shared_nfs_for_database##,$shared_storage_ip:/var/$cloud/ha-database," scenario.yml
              sed -i -e "s,##shared_nfs_for_rabbitmq##,$shared_storage_ip:/var/$cloud/ha-rabbitmq," scenario.yml
              sed -i -e "s,##shared_nfs_for_glance##,$shared_storage_ip:/var/$cloud/ha-glance," scenario.yml
              sed -i -e "s,##nfs_server##,$shared_storage_ip," scenario.yml
              sed -i -e "s,##nfs_export##,/var/$cloud/ha-glance," scenario.yml
              sed -i -e "s,##networkingplugin##,$networkingplugin," scenario.yml
              sed -i -e "s,##networkingmode##,$networkingmode," scenario.yml

              [ $UPDATEBEFOREINSTALL == "true" ] && export updatesteps="addupdaterepo runupdate" ;

              timeout --signal=ALRM 240m bash -x -c "\
              source scripts/qa_crowbarsetup.sh ;    \
              onadmin_runlist $commands;             "
          EOF
          ret=$?

          if [ $ret != 0 ] ; then
            ssh root@$admin <<EOF
            set -x
            for node in $(crowbar machines list | grep ^d) ; do
              (
              echo "Collecting supportconfig from $node"
              timeout 400 ssh $node supportconfig | wc
              timeout 300 scp $node:/var/log/\*tbz /var/log/
              )&
            done
            timeout 500 supportconfig | wc &
            wait
          EOF
            scp root@$admin:/var/log/*tbz $artifacts_dir/
          fi >&2

          echo "mkphyscloud ret=$ret"
          exit $ret

      - trigger-builds:
          - project: cloud-mkphyscloud-qa-tests-trigger
            condition: SUCCESS
            block: true
            predefined-parameters: |
              hw_number=$hw_number
              tempest=$tempest
              scenario_name=6a
              scenario_job_name=$JOB_NAME
              scenario_build_number=$BUILD_NUMBER

