- job:
    name: openstack-mkcloud
    node: openstack-mkcloud
    concurrent: true
    description: >
      This job runs https://github.com/SUSE-Cloud/automation/blob/master/scripts/mkcloud

      Results are analyzed by
      https://github.com/SUSE-Cloud/automation/blob/master/scripts/jenkins/mkcloudresultcheck.pl
      on mkcloudresultcheck@mkcloudresultcheck.cloud.suse.de every 15 minutes

    logrotate:
      numToKeep: 2000
      daysToKeep: 300

    properties:
      - authorization:
          cloud:
            - job-build
            - job-cancel
            - job-configure
            - job-delete
            - job-discover
            - job-read
            - job-workspace
            - run-delete
            - run-update
            - scm-tag
          anonymous:
            - job-read

    parameters:

      ################################################
      # CI job run

      - string:
          name: mkcloudtarget
          default: all
          description: >-
            Set mkcloudtarget to define the mkcloud command line parameters.

      - string:
          name: github_pr
          description: >-
            String is a ':' separated list of these values:
            $ORG/$repo:$PR_ID:$SHA1:$BRANCH:$context

            Note: SHA1 must be latest commit in PR, $context is optional
            (only use if multiple gating runs needed per PR)

      - string:
          name: job_name
          default: "-no-name-"
          description: >-
            This name will become the build name of the job.
            It will appear in the list of builds (webUI, RSS feed).

      - string:
          name: scenario
          default:
          description: >-
            Defines which scenario file should be used.
            Currently only the 'batch' step uses such a file.

      - label:
          name: label
          default: openstack-mkcloud
          description: >-
            Default: openstack-mkcloud |
            Possible values:
            openstack-mkcloud-SLE11 (SLE11 host),
            openstack-mkcloud-SLE12 (SLE12 host),
            openstack-mkcloud-SLE12-aarch64 (SLE12 aarch64 host)

      - string:
          name: debug_mkcloud
          default: '1'
          description: |
            Use set -x and PS4 tracing for mkcloud

      - string:
          name: debug_qa_crowbarsetup
          default: '1'
          description: |
            Use set -x and PS4 tracing for qa_crowbarsetup.sh

      ################################################
      # repositories

      - string:
          name: cloudsource
          default: develcloud8
          description: >-
            Can be something like develcloud7 (uses Devel:Cloud:*, see
            TESTHEAD parameter for Staging), susecloud6 (uses SUSE:*),
            GM3 (uses the GM ISO)

      - text:
          name: UPDATEREPOS
          default:
          description: >-
            Update repositories (one URL per line)

      - bool:
          name: UPDATEBEFOREINSTALL
          default: false
          description: >-
            Add update repos before crowbar install

      - string:
          name: TESTHEAD
          default: '1'
          description: >-
            If non-empty, test latest version from Devel:Cloud (:1.0)

      - string:
          name: want_test_updates
          default:
          description: >-
            Allow disabling of test updates

      - string:
          name: want_sles12
          default:
          description: >-
            Set to 1 if sle12 nodes should be installed

      - string:
          name: want_sles12sp2
          default:
          description: >-
            Deploy cloud7 with SP2 instead of SP1

      - string:
          name: want_cd
          default:
          description: >-
            Add CD repos before crowbar install

      - string:
          name: upgrade_cloudsource
          default:
          description: >-
            In case of using upgrade, upgrade to that cloudsource version

      ################################################
      # cloud shape and size

      - choice:
          name: libvirt_type
          choices:
            - kvm
            - xen
            - hyperv

      - string:
          name: nodenumber
          default: '2'
          description: >-
            Number of nodes excluding admin-node.  Minimum is 2 (controller+compute)

      - string:
          name: nics
          default:
          description: >-
            Number of network interfaces for the nodes (admin node has always 1 currently).
            If Ironic is enabled (want_ironic=1) min value of this parameter is set to 2.

      - bool:
          name: WITHCROWBARREGISTER
          default: false
          description: >-
            Boot up one node in the admin network from a preinstalled
            OS image, and register it with crowbar_register (image type
            depends on want_sles12 parameter)

      - string:
          name: want_node_aliases
          default:
          description: >-
            List of aliases to assign to nodes.  Takes all provided
            aliases and assign them to available nodes
            successively. Examples:

            want_node_aliases='controller=1,ceph=2,compute=1'
            assigns the aliases to 4 nodes as controller, ceph1, ceph2, compute

            want_node_aliases='data=1,services=2,storage=2'
            assigns the aliases to 5 nodes as data, service1, service2,
            storage1, storage2

      - string:
          name: hacloud
          default:
          description: If hacloud=1 then deploy a 4-node cluster

      - string:
          name: clusterconfig
          default:
          description: Cluster configuration to pass to the mkcloud script

      - string:
          name: vcpus
          default: '2'
          description: Number of vcpus for the compute nodes

      ################################################
      # OS deployment

      - string:
          name: want_efi
          default:
          description: Set to UEFI boot admin node

      - string:
          name: want_rootfs
          default:
          description: Set to btrfs to deploy with btrfs

      ################################################
      # Crowbar

      - string:
          name: crowbar_networkingmode
          default: 'single'
          description: The Crowbar networking mode.

      ################################################
      # general OpenStack deployment

      - string:
          name: want_all_ssl
          default:
          description: Set to 1 to deploy all cloud services with SSL aka HTTPS

      - string:
          name: want_ldap
          default:
          description: Set to 1 to deploy keystone with LDAP

      - string:
          name: want_database_sql_engine
          default: ''
          description: The database backend sql_engine to be used

      ################################################
      # neutron

      - choice:
          name: networkingplugin
          choices:
            - openvswitch
            - linuxbridge

      - choice:
          name: networkingmode
          choices:
            - gre
            - vlan
            - vxlan

      - string:
          name: want_dvr
          default:
          description: Set to 1 to deploy neutron with Distributed Virtual Router

      ################################################
      # storage

      - string:
          name: cephvolumenumber
          default: '1'
          description: number of extra disks (for cinder, swift, ceph)

      - choice:
          name: storage_method
          description: |
            Select storage method: default (let mkcloud decide), none (enforce none)
          choices:
            - default
            - none
            - swift
            - ceph

      - choice:
          name: cinder_backend
          choices:
            - " "
            - local
            - raw
            - rbd
            - netapp
            - nfs

      - bool:
          name: want_cindermultibackend
          default: false
          description: enables deployment of more than one cinder backend

      - string:
          name: cinder_netapp_login
          default:
          description: >-
            Password for the user "openstack" as configured on the netapp server

      - string:
          name: cinder_netapp_password
          default:
          description: >-
            Password for the user "openstack" as configured on the netapp server

      ################################################
      # tempest

      - string:
          name: want_tempest
          default:
          description: can be used for force off(0) or on(1)

      - string:
          name: tempestoptions
          default:
          description: >-
            Additional options to pass to the "tempest run " step. The
            default is cloudversion specific but will default to a smoke run.

      ################################################
      # horizon

      - string:
          name: want_horizon_integration_test
          default:
          description: >-
            Execute selenium integration tests for Horizon after
            Tempest. This test is in beta, and a fail will not be
            considered for now.

      ################################################
      # extras

      - string:
          name: want_ironic
          default:
          description: set to 1 to deploy with ironic

      - string:
          name: want_ceilometer_proposal
          default:
          description: Deploy with Ceilomenter

      - string:
          name: want_magnum_proposal
          default:
          description: Deploy with Magnum

      - string:
          name: want_manila_proposal
          default:
          description: Deploy with Manila

      - string:
          name: want_monasca_proposal
          default:
          description: Deploy with Monasca

      - string:
          name: want_barbican_proposal
          default:
          description: Deploy with Barbican

      - string:
          name: want_sahara_proposal
          default:
          description: set to 1 to deploy sahara

      - string:
          name: want_murano_proposal
          default:
          description: set to 1 to deploy murano

      - string:
          name: want_aodh_proposal
          default: '1'
          description: set to 0 to not deploy aodh

      ################################################
      # misc

      - string:
          name: want_nodesupgrade
          default: '1'
          description: set to 0 to not upgrade nodes, only admin server

      - string:
          name: want_ping_running_instances
          default:
          description: set to 1 to ping running instances during the upgrade

      - string:
          name: SUPPORTCONFIG_OPTIONS
          default: '-l -I 5000'
          description: >-
            Options to be passed to supportconfig if the job fails.

      - text:
          name: custom_settings
          default:
          description: >-
            This holds shell code and will be executed before calling
            mkcloud. This should not be used by default or regularly. It
            is meant to test PRs with special configurations.

    wrappers:
      - timestamps:
      - build-name:
          name: '#${BUILD_NUMBER}: ${ENV,var="job_name"}'
      - timeout:
          timeout: 60
          type: no-activity
          abort: true
          write-description: "Job aborted due to 60 minutes of inactivity."

    builders:
      - shell: |
          set -x
          shopt -s extglob
          # emptying the workspace
          mkdir -p empty
          rsync -r --delete empty/ ./

          export artifacts_dir=$WORKSPACE/.artifacts
          rm -rf $artifacts_dir
          mkdir -p $artifacts_dir
          touch $artifacts_dir/.ignore
          export log_dir=$artifacts_dir/mkcloud_log

          export automationrepo=~/github.com/SUSE-Cloud/automation
          jtsync=${automationrepo}/scripts/jtsync/jtsync.rb
          export ghprrepo=~/github.com/openSUSE/github-pr
          export ghpr=${ghprrepo}/github_pr.rb

          export want_neutronsles12=1
          export want_mtu_size=8900
          [[ $libvirt_type = hyperv ]] && want_mtu_size=1500 # windows-PXE-bootloader seems to not like jumbo-packets
          export rally_server=backup.cloudadm.qa.suse.de
          # to not fail when two concurrent zypper runs happen:
          export ZYPP_LOCK_TIMEOUT=120

          # enable mkcloud options specific for CI runs
          export CI_RUN=1

          case $cloudsource in
              develcloud6)
                  if [[ $mkcloudtarget =~ upgrade ]]; then
                      echo "Unsetting want_ldap for upgrade jobs until hybrid backend is ported to Mitaka"
                      unset want_ldap
                  fi
                  ;;
              M*|ocatacloud8|develcloud8|develcloud7|mitakacloud7|susecloud7)
                  if [[ $mkcloudtarget =~ upgrade ]]; then
                      echo "Unsetting want_ldap for upgrade jobs until hybrid backend is migrated to domain-specific backends"
                      unset want_ldap
                  else
                      [[ $nodenumber == 2 && -z "$scenario" ]] && export want_ldap=1
                  fi
                  ;;
              *)
                  [[ $nodenumber == 2 && -z "$scenario" ]] && export want_ldap=1
                  ;;
          esac


          if [[ $cinder_backend = " " ]] ; then
            cinder_backend=""
          elif [[ $cinder_backend = "nfs" ]] ; then
            export nodenumberlonelynode=1
          fi


          # HAcloud
          if [[ $hacloud == 1 ]] ; then
            case $cloudsource in
              develcloud6|develcloud7|mitakacloud7|susecloud7)
                  clusternodes=2
                  nodes=3
                  ;;
              *)
                  clusternodes=3
                  nodes=4
                  ;;
            esac

            : ${clusterconfig:=data+services+network=$clusternodes}
            export clusterconfig
            if [[ $nodenumber -lt $nodes ]] ; then
                export nodenumber=$nodes
            fi

            # for now disable ceph deployment in HA mode explicitly
            # it would need 5 nodes (2 for the cluster + 3 nodes for compute and ceph)
            #### temorarily allow ceph in HA (test if it works)
            #export want_ceph=0
            #export cephvolumenumber=0
          fi

          #storage
          case "$storage_method" in
            none)
              want_ceph=0
              want_swift=0
              ;;
            swift)
              want_ceph=0
              want_swift=1
              ;;
            ceph)
              want_ceph=1
              want_swift=0
              if [[ $nodenumber -lt 5 ]] ; then
                export nodenumber=5
              fi
              if [[ $cephvolumenumber -lt 2 ]] ; then
                cephvolumenumber=2
              fi
              ;;
            *)
              unset want_ceph
              unset want_swift
          esac
          export want_ceph
          export want_swift

          if [ ! -z "$UPDATEREPOS" ] ; then
            # testing update only makes sense with GM and without TESTHEAD
          #  unset TESTHEAD
          #  export cloudsource=GM
            export UPDATEREPOS=${UPDATEREPOS//$'\n'/+}
          fi


          # automation bootstrapping
          if ! [ -e ${automationrepo}/scripts/jenkins/update_automation ] ; then
            rm -rf ${automationrepo}
            curl https://raw.githubusercontent.com/SUSE-Cloud/automation/master/scripts/jenkins/update_automation | bash
          fi
          # fetch the latest automation updates
          ${automationrepo}/scripts/jenkins/update_automation #NO PARAMETERS HERE ANY MORE!!!

          function mkcloudgating_trap()
          {
              $ghpr --action set-status --debugratelimit $ghpr_paras --status "failure" --targeturl ${BUILD_URL}parsed_console/
          }

          ## mkcloud github PR gating
          if [[ $github_pr ]] ; then
              github_opts=(${github_pr//:/ })
              github_pr_repo=${github_opts[0]}
              github_pr_id=${github_opts[1]}
              github_pr_sha=${github_opts[2]}
              github_pr_context=${github_opts[4]}
              github_context=suse/mkcloud
              if [[ $github_pr_context ]] ; then
                github_context=$github_context/$github_pr_context
              fi
              github_org=${github_pr_repo%/*}
              github_repo=${github_pr_repo##*/}
              ghpr_paras="--org ${github_org} --repo ${github_repo} --sha $github_pr_sha --context $github_context"

              echo "testing PR: https://github.com/$github_pr_repo/pull/$github_pr_id"
              sudo ZYPP_LOCK_TIMEOUT=$ZYPP_LOCK_TIMEOUT zypper -n install "rubygem(netrc)" "rubygem(octokit)"

              if ! $ghpr --action is-latest-sha $ghpr_paras --pr $github_pr_id ; then
                  $ghpr --action set-status $ghpr_paras --status "error" --targeturl $BUILD_URL --message "SHA1 mismatch, newer commit exists"
                  exit 1
              fi

              trap "mkcloudgating_trap" ERR

              # Support for automation self-gating
              if [[ "$github_pr_repo" = "SUSE-Cloud/automation" ]]; then
                  automationrepo_orig=$automationrepo
                  pr_dir=`mktemp -d $WORKSPACE/SUSE-Cloud.automation.XXXXXX`
                  automationrepo=$pr_dir/automation

                  mkdir -p $automationrepo
                  rsync -a ${automationrepo_orig%/}/ $automationrepo/
                  pushd $automationrepo
                  ghremote=origin
                  git config --get-all remote.${ghremote}.fetch | grep -q pull || \
                      git config --add remote.${ghremote}.fetch "+refs/pull/*/head:refs/remotes/${ghremote}/pr/*"
                  git fetch $ghremote 2>&1 | grep -v '\[new ref\]' || :
                  git checkout -t $ghremote/pr/$github_pr_id
                  git config user.email cloud-devel+jenkins@suse.de
                  git config user.name "Jenkins User"
                  echo "we merge to always test what will end up in master"
                  git merge master -m temp-merge-commit
                  # Show latest commit in log to see what's really tested.
                  # Include a unique indent so that the log parser plugin
                  # can ignore the output and avoid false positives.
                  git --no-pager show | sed 's/^/|@| /'
                  popd
              elif [[ "$github_pr_repo" = "SUSE-Cloud/cct" ]]; then
                  export want_cct_pr=$github_pr_id
              fi

              $ghpr --action set-status $ghpr_paras --status "pending" --targeturl $BUILD_URL --message "Started PR gating"

          fi

          cp ${automationrepo}/scripts/jenkins/log-parser/openstack-mkcloud-rules.txt \
              $WORKSPACE/log-parser-plugin-rules.txt

          echo "########################################################################"
          env
          echo "########################################################################"

          MKCLOUDTARGET=$mkcloudtarget
          [ $UPDATEBEFOREINSTALL == "true" ] && MKCLOUDTARGET='cleanup prepare setupadmin addupdaterepo instcrowbar setupcompute instcompute proposal testsetup'

          [ $(uname -m) = s390x ] && WITHCROWBARREGISTER=true
          if [ $WITHCROWBARREGISTER == "true" ] ; then
            export nodenumberlonelynode=1
            [ $(uname -m) = s390x ] && {
                export nodenumberlonelynode=$nodenumber
                export nodenumber=0
                export controller_node_memory=8388608
                export compute_node_memory=6291456
            }
            MKCLOUDTARGET+=" setuplonelynodes crowbar_register"
          fi

          [ $(uname -m) = aarch64 ] && {
              export vcpus=16
          }

          pushd ~/pool/
              # free up a pool if more than one is reserved
              # policy allows only one reservation per host at the moment
              ls -1 | grep -v "^[0-9]\+$" | sort -R | head -n -1 | while read p ; do mv $p ${p%%.*} ; done
          popd

          starttime=`date +%s`

          mkcloudwrapper="${automationrepo}/scripts/mkcloudhost/allocpool ${automationrepo}/scripts/mkcloudhost/mkcloude"
          #FIXME - drop next 3 lines once the change in allocpool is merged
          if grep -q "exec.*mkcloude" ${automationrepo}/scripts/mkcloudhost/allocpool ; then
              mkcloudwrapper=${automationrepo}/scripts/mkcloudhost/allocpool
          fi

          # Shut down the cloud to save resources
          ##MKCLOUDTARGET+=" cleanup"

          export clouddescription="Jenkins Build: $BUILD_NUMBER / $JOB_NAME"

          $custom_settings

          perl -e "alarm 6*60*60 ; exec '${mkcloudwrapper} bash ${automationrepo}/scripts/mkcloud setuphost $(echo -n $MKCLOUDTARGET) ' ; print qq{$!\n} ; exit 127 " | tee $artifacts_dir/mkcloud_short_stdout.log
          ret=${PIPESTATUS[0]}
          if [[ $ret != 0 ]] ; then
              if [[ $github_pr_sha ]] ; then
                mkcloudgating_trap
              else
                $jtsync --ci suse --job $JOB_NAME 1
              fi
              echo "mkcloud ret=$ret"
              exit $ret # check return code before tee
          fi

          # report mkcloud-gating status or jenkins trello status
          if [[ $github_pr_sha ]] ; then
            $ghpr --action set-status --debugratelimit $ghpr_paras --status "success" --targeturl $BUILD_URL --message "PR gating succeeded"
            trap "-" ERR
          else
            $jtsync --ci suse --job $JOB_NAME 0
          fi

    publishers:
      - logparser:
          use-project-rules: true
          parse-rules: log-parser-plugin-rules.txt
          unstable-on-warning: false
          fail-on-error: false
          show-graphs: true
      - archive:
          artifacts: .artifacts/**
          allow-empty: false
          only-if-success: false
          fingerprint: false
          default-excludes: true
    triggers: []
