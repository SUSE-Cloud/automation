- job:
    name: ardana-job
    concurrent: true
    workspace: "ardana-job-$BUILD_ID"
    # the selected node needs the cloud credentials
    node: cloud-ardana-ci
    wrappers:
      - timestamps
      - build-name:
          name: '#${BUILD_NUMBER}: ${ENV,var="job_name"}/${ENV,var="model"}'

      - timeout:
          timeout: 120
          type: no-activity
          abort: true
          write-description: "Job aborted due to 120 minutes of inactivity"

    logrotate:
      numToKeep: 20
      daysToKeep: 30

    parameters:
      - string:
          name: git_automation_repo
          default: https://github.com/SUSE-Cloud/automation.git
          description: >-
            The git automation repository to use

      - string:
          name: git_automation_branch
          default: master
          description: >-
            The git automation branch

      - string:
          name: model
          default: deployerincloud-lite
          description: >-
            The Input Model to use

      - string:
          name: job_name
          default: ''
          description: >-
            This name will become the build name of the job.

      - string:
          name: cloudsource
          default: 'SUSE-OpenStack-Cloud-8-devel-staging'
          description: >-
            This is used as input repository (from provo-clouddata) for testing

      - string:
          name: tempest_run_filter
          default: smoke
          description: >-
            Name of the filter file to use for tempest. Possible values:
            ci, compute, designate, lbaas, network, neutron-api, periodic,
            periodic-virtual, refstack, smoke, swift, tests2skip, tests-ci,
            upgrade-ci or upgrade

    builders:
      - shell: |
          set -ex
          STACK_NAME=cloud-ci-ardana-job-${BUILD_NUMBER}
          if [ -n "${JOB_NAME}" ]; then
              STACK_NAME=${STACK_NAME}-${JOB_NAME}
          fi
          export ANSIBLE_HOST_KEY_CHECKING=False
          export ANSIBLE_KEEP_REMOTE_FILES=1
          # the name for the cloud defined in ~./config/openstack/clouds.yaml
          CLOUD_CONFIG_NAME=engcloud-cloud-ci

          # init the git tree
          git clone $git_automation_repo --branch $git_automation_branch automation-git
          pushd automation-git/scripts/jenkins/ardana/

          openstack --os-cloud $CLOUD_CONFIG_NAME stack create --timeout 5 --wait -t heat-ardana-${model}.yaml  $STACK_NAME
          DEPLOYER_IP=$(openstack --os-cloud $CLOUD_CONFIG_NAME stack output show $STACK_NAME deployer-ip-floating -c output_value -f value)
          DEPLOYER_MGMT_IP=$(openstack --os-cloud $CLOUD_CONFIG_NAME stack output show $STACK_NAME deployer-net-mgmt-ip -c output_value -f value)
          COMPUTE1_MGMT_IP=$(openstack --os-cloud $CLOUD_CONFIG_NAME stack output show $STACK_NAME compute1-net-mgmt-ip -c output_value -f value)
          COMPUTE2_MGMT_IP=$(openstack --os-cloud $CLOUD_CONFIG_NAME stack output show $STACK_NAME compute2-net-mgmt-ip -c output_value -f value)
          NETWORK_MGMT_ID=$(openstack --os-cloud $CLOUD_CONFIG_NAME stack output show $STACK_NAME network-mgmt-id -c output_value -f value)
          # FIXME: Use cloud-init in the used image
          sshpass -p linux ssh-copy-id -o ConnectionAttempts=120 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ${DEPLOYER_IP}
          pushd ansible
          cat << EOF > hosts
          [hosts]
          $DEPLOYER_IP ansible_user=root
          EOF
          cat hosts

          cat << EOF > ardana_net_vars.yml
          ---
          deployer_mgmt_ip: $DEPLOYER_MGMT_IP
          compute1_mgmt_ip: $COMPUTE1_MGMT_IP
          compute2_mgmt_ip: $COMPUTE2_MGMT_IP
          EOF
          # Get the IP addresses of the dns servers from the mgmt network
          echo "mgmt_dnsservers:" >> ardana_net_vars.yml
          openstack --os-cloud $CLOUD_CONFIG_NAME port list --network $NETWORK_MGMT_ID \
                    --device-owner network:dhcp -f value -c 'Fixed IP Addresses' | \
              sed -e "s/^ip_address='\(.*\)', .*$/\1/" | \
              while read line; do echo "  - $line" >> ardana_net_vars.yml; done;

          cat ardana_net_vars.yml

          ansible-playbook -vvv -i hosts ssh-keys.yml
          ansible-playbook -vvv -i hosts -e "cloudsource=${cloudsource}" repositories.yml
          ansible-playbook -vvv -i hosts -e "deployer_floating_ip=$DEPLOYER_IP" \
                                         -e "deployer_model=${model}" \
                                         -e "tempest_run_filter=${tempest_run_filter}" \
                                         init.yml
