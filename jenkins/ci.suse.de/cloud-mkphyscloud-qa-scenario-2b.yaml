- job:
    name: cloud-mkphyscloud-qa-scenario-2b
    node: cloud-mkphyscloud-gate-qa
    description: |
      <b>This job is managed by JJB! Changes must be done in
      <a href='https://github.com/SUSE-Cloud/automation/tree/master/jenkins/ci.suse.de/'>git</a>
      </b>

      This job will redeploy the scenario-2b:
        - total 7 nodes
        - database: default
        - pacemaker: 1 cluster with 3 controllers
        - nova: no ssl, libvirt migration enabled, shared storage, kvm kernel samepage merging, 1 kvm and 1 ESXi compute nodes
        - glance: vmare
        - cinder: vmware
        - neutron: vmware (vmware_dvs ml2 plugin)

      Warning: You need to have vmware installed at 10.162.66.201
      Follow the instructions in: https://gitlab.suse.de/qa/cloud-doc/blob/master/vmware.md

    wrappers:
      - mkphyscloud-qa-common-wrappers
    publishers:
      - mkphyscloud-qa-common-publishers

    logrotate:
      numToKeep: 15
      daysToKeep: -1

    parameters:
      - string:
          name: hw_number
          default: "2"
          description: Mandatory, name of the QA cloud server as integer

      - string:
          name: admin_os
          default: sles12sp3
          description: Mandatory, admin node operating system version

      - string:
          name: shared_storage_ip
          default: 10.162.66.1
          description: Mandatory, shared storage server IP

      - string:
          name: vcenter_ip
          default: 10.162.66.201
          description: Mandatory, ip of the vcenter

      - string:
          name: repo_owner
          default: SUSE-Cloud
          description: Mandatory, automation repo owner/organization

      - string:
          name: branch
          default: master
          description: Mandatory, automation repo branch

      - string:
          name: automation_repo
          default: github.com/$repo_owner/automation#$branch
          description: Mandatory, automation repo URL

      - string:
          name: tempest
          default: smoke
          description: Optional, specify what tempest test(s) to run, e.g. smoke, smoke|full or smoke|defcore

      - bool:
          name: rally-tests
          default: false
          description: Optional, Run rally  tests

      - string:
          name: ssl_type
          default: no-ssl
          description: "Mandatory, set the SSL configuration for the cloud, available options: no-ssl, ssl-insecure, ssl"

      - string:
          name: cloud_version
          default: "8"
          description: Mandatory, version of the cloud to be installed as integer

      - string:
          name: scenario_dir
          default: ""
          description: |
            Custom scenario directory to look for scenario file in. If
            unspecified this will be determined automatically based on cloud
            version and SSL settings.

      - string:
          name: scenario_file
          default: qa-scenario-2b.yaml
          description: Scenario YAML file name

      # Parameters for qa_crowbarsetup.sh
      - string:
          name: cloudsource
          default: develcloud$cloud_version

      - string:
          name: TESTHEAD
          default: "1"
          description: if non-empty, test latest version from Devel:Cloud Stagin

      - string:
          name: hacloud
          default: "1"
          description: By default we do not want HA configured and installed

      - string:
          name: clusterconfig
          default: services=3
          description: HA configuration for clusters. Make sense only if hacloud=1

      - string:
          name: nodenumber
          default: "6"
          description: Number of nodes to use; is scenario specific

      - string:
          name: want_ipmi
          default: "1"
          description: Boolean. If 'true' nodes will be rebooted via IPMI

      - string:
          name: commands
          default: addupdaterepo prepareinstallcrowbar runupdate bootstrapcrowbar installcrowbar allocate waitcloud setup_aliases batch
          description: All the steps that needs to be completed to have cloud installed

      - string:
          name: want_test_updates
          default: 0
          description: Use updates-test repos for all SUSE products

      - text:
          name: UPDATEREPOS
          default:
          description: Update repositories (one URL per line)
      - bool:
          name: UPDATEBEFOREINSTALL
          default: false
          description: add update repos before crowbar install

    builders:
      - shell: |
          #!/bin/bash
          admin=crowbar$hw_number
          cloud=qa$hw_number
          vcenter_ip=$vcenter_ip
          vcenter_user="Administrator@vsphere.local"
          vcenter_password=`cat /home/jenkins/passwords/administrator@vsphere.local`

          if [ ! -z "$UPDATEREPOS" ] ; then
            export UPDATEREPOS=${UPDATEREPOS//$'\n'/+}
          fi

          export artifacts_dir=$WORKSPACE/.artifacts
          rm -rf $artifacts_dir
          mkdir -p $artifacts_dir
          touch $artifacts_dir/.ignore

          freshadminvm $admin $admin_os
          sleep 100 # time for the admin VM to boot

          # wipe out shared NFS that being used by this deployment:
          # /usr/local/sbin/wipe_nfs_shares
          ssh root@localhost "wipe_nfs_shares qa$hw_number"

          # rest of code runs on admin node:
          # clone, fetch and update the automation repo
          # /usr/local/sbin/update_automation
          update_automation

          # put variables needed during the build process into mkcloud.config file
          env | grep -e networking -e libvirt -e cloud > mkcloud.config

          # copy scripts/ dir onto the admin node in /root/scripts
          scp -r ~/github.com/$repo_owner/automation/scripts mkcloud.config root@$admin:

          # Use custom scenario dir if specified, otherwise default to the one
          # based on $cloud_version and $ssl_type.

          if [ -z "$scenario_dir" ]; then
            scenario_dir=scripts/scenarios/cloud$cloud_version/qa/$ssl_type/$scenario_file
          fi

          # copy scenario file onto the admin node in /root/scenario.yml

          scp ~/github.com/$repo_owner/automation/${scenario_dir}/${scenario_file} \
              root@$admin:scenario.yml

          ret=0

          ssh root@$admin "
          export cloud=$cloud ;
          export hw_number=$hw_number ;
          export UPDATEREPOS=$UPDATEREPOS ;
          export UPDATEBEFOREINSTALL=$UPDATEBEFOREINSTALL ;
          export TESTHEAD=$TESTHEAD ;
          export cloudsource=$cloudsource ;
          export nodenumber=$nodenumber ;
          export hacloud=$hacloud ;
          export clusterconfig=$clusterconfig ;
          export shared_storage_ip=$shared_storage_ip
          export want_node_aliases=controller=3,computekvm=2,computevmw=1 ;
          export want_node_roles=controller=3,compute=4 ;
          export want_swift=1 ;
          export cephvolumenumber=1 ;
          export scenario=\"/root/scenario.yml\" ;
          export vcenter_ip=$vcenter_ip ;
          export vcenter_user="Administrator@vsphere.local" ;
          export vcenter_password=$vcenter_password ;
          export commands=\"$commands\" "'

          sed -i -e "s,##shared_nfs_for_database##,$shared_storage_ip:/var/$cloud/ha-database," scenario.yml
          sed -i -e "s,##shared_nfs_for_rabbitmq##,$shared_storage_ip:/var/$cloud/ha-rabbitmq," scenario.yml
          sed -i -e "s,##cinder-storage-shares##,$shared_storage_ip:/var/$cloud/cinder-storage," scenario.yml
          sed -i -e "s,@@vcenter_ip@@,${vcenter_ip}," scenario.yml
          sed -i -e "s,@@vcenter_user@@,${vcenter_user}," scenario.yml
          sed -i -e "s,@@vcenter_password@@,${vcenter_password}," scenario.yml

          [ $UPDATEBEFOREINSTALL == "true" ] && export updatesteps="addupdaterepo runupdate"

          timeout --signal=ALRM 240m bash -x -c "source scripts/qa_crowbarsetup.sh ; onadmin_runlist $commands"
          ' || ret=$?

          echo "mkphyscloud ret=$ret (before scenario)"

          if [ "$ret" = "0" ]; then
            ssh root@$admin "
            export cloud=$cloud ;
            export TESTHEAD=$TESTHEAD ;
            export cloudsource=$cloudsource ;
            export nodenumber=$nodenumber ;
            export hacloud=$hacloud ;
            export clusterconfig=$clusterconfig ;
            export want_ceph=1 ;
            export cephvolumenumber=2;
            export scenario=scenario.yml "'

            timeout --signal=ALRM 240m bash -x -c "source scripts/qa_crowbarsetup.sh ; onadmin_runlist batch;"
            ' || ret=$?


            if [ $ret != 0 ] ; then
              ssh root@$admin '
              set -x
              for node in $(crowbar machines list | grep ^d) ; do
                (
                echo "Collecting supportconfig from $node"
                timeout 400 ssh $node supportconfig | wc
                timeout 300 scp $node:/var/log/\*tbz /var/log/
                )&
              done
              timeout 500 supportconfig | wc &
              wait
              '

              scp root@$admin:/var/log/*tbz $artifacts_dir/
            fi >&2
            echo "mkphyscloud ret=$ret"
          fi
          exit $ret

      - trigger-builds:
          - project: cloud-mkphyscloud-qa-tests-trigger
            condition: SUCCESS
            block: true
            predefined-parameters: |
              hw_number=$hw_number
              tempest=$tempest
              scenario_name=2b
              scenario_job_name=$JOB_NAME
              scenario_build_number=$BUILD_NUMBER
