---

- name: Get ceph data partitions
  shell: |
    blkid -o device -t PARTLABEL="ceph data"
  failed_when: false
  register: ceph_data_partition_to_erase_path

- name: Get ceph block partitions
  shell: |
    blkid -o device -t PARTLABEL="ceph block"
  failed_when: false
  register: ceph_block_partition_to_erase_path

- name: Get ceph journal partitions
  shell: |
    blkid -o device -t PARTLABEL="ceph journal"
  failed_when: false
  register: ceph_journal_partition_to_erase_path

- name: Get ceph db partitions
  shell: |
    blkid -o device -t PARTLABEL="ceph block.db"
  failed_when: false
  register: ceph_db_partition_to_erase_path

- name: Get ceph wal partitions
  shell: |
    blkid -o device -t PARTLABEL="ceph block.wal"
  failed_when: false
  register: ceph_wal_partition_to_erase_path

- name: Create combined_devices_list
  set_fact:
    combined_devices_list: "{{ ceph_data_partition_to_erase_path.stdout_lines +
                               ceph_block_partition_to_erase_path.stdout_lines +
                               ceph_journal_partition_to_erase_path.stdout_lines +
                               ceph_db_partition_to_erase_path.stdout_lines +
                               ceph_wal_partition_to_erase_path.stdout_lines }}"

- name: Resolve parent device
  shell: echo /dev/$(lsblk -no pkname "{{ item }}")
  register: tmp_resolved_parent_device
  with_items:
    - "{{ combined_devices_list }}"

- name: Create resolved_parent_device
  set_fact:
    resolved_parent_device: "{{ tmp_resolved_parent_device.results | map(attribute='stdout') | list | unique }}"
  when: combined_devices_list | length > 0

- name: Zap ceph journal/block db/block wal partitions
  shell: |
    # if the disk passed is a raw device AND the boot system disk
    if parted -s "{{ item }}" print | grep -sq boot; then
      echo "Looks like {{ item }} has a boot partition,"
      echo "if you want to delete specific partitions point to the partition instead of the raw device"
      echo "Do not use your system disk!"
      exit 1
    fi
    sgdisk -Z "{{ item }}"
    dd if=/dev/zero of="{{ item }}" bs=1M count=200
    udevadm settle --timeout=600
  with_items:
    - "{{ resolved_parent_device }}"
  when: combined_devices_list | length > 0
