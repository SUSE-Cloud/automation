<?xml version="1.0" encoding="UTF-8"?>
<project>
  <actions/>
  <description>!!! This job is automatically pushed from GIT to ci.suse.de !!!&#13;
REMEMBER: changes to this job will be overwritten after a few hours - make sure to create a PR for your changes&#13;
&#13;
This job runs https://github.com/SUSE-Cloud/automation/blob/master/scripts/mkcloud&#13;
&#13;
results are analyzed by https://github.com/SUSE-Cloud/automation/blob/master/scripts/jenkins/mkcloudresultcheck.pl on mkcloudresultcheck@mkcloudresultcheck.cloud.suse.de every 15 minutes</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.security.AuthorizationMatrixProperty>
      <permission>hudson.scm.SCM.Tag:cloud</permission>
      <permission>hudson.model.Run.Delete:cloud</permission>
      <permission>hudson.model.Item.Read:anonymous</permission>
      <permission>hudson.model.Item.Read:cloud</permission>
      <permission>hudson.model.Item.Discover:cloud</permission>
      <permission>hudson.model.Item.Build:cloud</permission>
      <permission>hudson.model.Item.Cancel:cloud</permission>
      <permission>hudson.model.Item.Workspace:cloud</permission>
      <permission>hudson.model.Item.Delete:cloud</permission>
      <permission>hudson.model.Item.Configure:cloud</permission>
      <permission>hudson.model.Run.Update:cloud</permission>
    </hudson.security.AuthorizationMatrixProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@">
      <gitLabConnection>https://gitlab.suse.de</gitLabConnection>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <org.jenkinsci.plugins.gitlablogo.GitlabLogoProperty plugin="gitlab-logo@">
      <repositoryName/>
    </org.jenkinsci.plugins.gitlablogo.GitlabLogoProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>cloudsource</name>
          <description>Can be something like "develcloud3" (uses Devel:Cloud:*, see TESTHEAD parameter for Staging), "susecloud3" (uses SUSE:*), "GM3" (uses the GM ISO)</description>
          <defaultValue>develcloud5</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>mkcloudtarget</name>
          <description>Set mkcloudtarget to define the mkcloud command line parameters.</description>
          <defaultValue>all</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>libvirt_type</name>
          <description/>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>kvm</string>
              <string>xen</string>
              <string>hyperv</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>networkingplugin</name>
          <description/>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>openvswitch</string>
              <string>linuxbridge</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>networkingmode</name>
          <description/>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>gre</string>
              <string>vlan</string>
              <string>vxlan</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>storage_method</name>
          <description>Select storage method: default (let mkcloud decide), none (enforce none)</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>default</string>
              <string>none</string>
              <string>swift</string>
              <string>ceph</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>github_pr</name>
          <description>String is a ':' separated list of these vaules: $ORG/$repo:$PR_ID:$SHA1:$BRANCH:$context
Note: SHA1 must be latest commit in PR, $context is optional (only use if multiple gating runs needed per PR)
</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>UPDATEREPOS</name>
          <description>Update repositories (one URL per line)</description>
          <defaultValue/>
        </hudson.model.TextParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>UPDATEBEFOREINSTALL</name>
          <description>add update repos before crowbar install</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TESTHEAD</name>
          <description>if non-empty, test latest version from Devel:Cloud (:1.0)</description>
          <defaultValue>1</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>nodenumber</name>
          <description>number of nodes excl. admin-node
minimum 2=controller+compute</description>
          <defaultValue>2</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>nodenumbercompute</name>
          <description>Number of compute  nodes</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>want_tempest</name>
          <description>can be used for force off(0) or on(1)</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>tempestoptions</name>
          <description>Additional options to pass to the "run_tempest.sh -N " step.
Use just "-t" for a full tempest run.
Default: -t -s.</description>
          <defaultValue>-t -s</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ostestroptions</name>
          <description>If given, a extra ostestr run is executed (after the default tempest run).
Use i.e. " --regex '^magnum.tests.functional.api'"</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>want_sles12</name>
          <description>Set to 1 if sle12 nodes should be installed</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>want_sles12sp2</name>
          <description>deploy cloud7 with SP2 instead of SP1</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>upgrade_cloudsource</name>
          <description>In case of using upgrade, upgrade to that cloudsource version
</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>hacloud</name>
          <description>If hacloud=1 then deploy a 4-node cluster</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>WITHCROWBARREGISTER</name>
          <description>boot up one lonely node in the admin network and register it with crowbar_register (image type depends on want_sles12 parameter)</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>want_all_ssl</name>
          <description>set to 1 to deploy all cloud services with SSL aka HTTPS</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>cinder_backend</name>
          <description/>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string> </string>
              <string>local</string>
              <string>raw</string>
              <string>rbd</string>
              <string>netapp</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>want_cindermultibackend</name>
          <description>enables deployment of more than one cinder backend</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>cinder_netapp_login</name>
          <description>this is currently the user "openstack" as configured on the netapp server</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>cinder_netapp_password</name>
          <description>the password for the user "openstack" as configured on the netapp server</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition plugin="nodelabelparameter@">
          <name>label</name>
          <description>Default: openstack-mkcloud | Possible values:  openstack-mkcloud-SLE11 (SLE11 host) | openstack-mkcloud-SLE12 (SLE12 host) | openstack-mkcloud-SLE12-aarch64 (SLE12 aarch64 host)</description>
          <defaultValue>openstack-mkcloud</defaultValue>
          <allNodesMatchingLabel>false</allNodesMatchingLabel>
          <triggerIfResult>allCases</triggerIfResult>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>want_node_aliases</name>
          <description>List of aliases to assign to nodes. Takes all provided aliases and assign them to available nodes successively.

        Examples:
            want_node_aliases='controller=1,ceph=2,compute=1'
              assigns the aliases to 4 nodes as controller, ceph1, ceph2, compute
            want_node_aliases='data=1,services=2,storage=2'
              assigns the aliases to 5 nodes as data, service1, service2, storage1, storage2</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>scenario</name>
          <description>Defines which scenario file should be used. Only works with cloud5 or newer.
Currently only the 'batch' step uses such a file.</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>want_docker</name>
          <description>set to 1 to deploy with docker</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>want_test_updates</name>
          <description>allow disabling of test updates</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>want_magnum</name>
          <description>Deploy with Magnum</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>want_barbican</name>
          <description>Deploy with Barbican</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>vcpus</name>
          <description>number of vcpus for the compute nodes</description>
          <defaultValue>2</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>want_sahara</name>
          <description>set to 0 to not deploy sahara</description>
          <defaultValue>1</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>want_rootfs</name>
          <description>set to btrfs to deploy with btrfs</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>want_postgresql</name>
          <description>set to 1 to deploy with postgresql</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>want_efi</name>
          <description>Set to UEFI boot admin node</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>want_murano</name>
          <description>set to 1 to deploy murano</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>300</daysToKeep>
        <numToKeep>1000</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>openstack-mkcloud</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>set -x
shopt -s extglob
# emptying the workspace
mkdir -p empty
rsync -r --delete empty/ ./

export artifacts_dir=$WORKSPACE/.artifacts
rm -rf $artifacts_dir
mkdir -p $artifacts_dir
touch $artifacts_dir/.ignore
export log_dir=$artifacts_dir/mkcloud_log

export automationrepo=~/github.com/SUSE-Cloud/automation
export debug_qa_crowbarsetup=1
export cephvolumenumber=1 # one disk is either cinder raw, ceph-osd or swift storage
export debug=0
export want_neutronsles12=1
export want_mtu_size=8900
[[ $libvirt_type = hyperv ]] &amp;&amp; want_mtu_size=1500 # windows-PXE-bootloader seems to not like jumbo-packets
export rally_server=backup.cloudadm.qa.suse.de
# to not fail when two concurrent zypper runs happen:
export ZYPP_LOCK_TIMEOUT=120

case $cloudsource in
    GM4|GM4+up|GM5|GM5+up)
        echo "Not setting want_ldap=1"
        ;;
    develcloud6)
        if [[ $mkcloudtarget =~ upgrade ]]; then
            echo "Unsetting want_ldap for upgrade jobs until hybrid backend is ported to Mitaka"
            unset want_ldap
        fi
        ;;
    M*|develcloud7|susecloud7)
        echo "Not setting want_ldap=1 until hybrid backend is ported to Mitaka"
        ;;
    *)
        [[ $nodenumber == 2 &amp;&amp; -z "$scenario" ]] &amp;&amp; export want_ldap=1
        ;;
esac


if [[ $cinder_backend = " " ]] ; then
  cinder_backend=""
fi


# HAcloud
if [[ $hacloud == 1 ]] ; then
  export clusterconfig="data+services+network=2"
  if [[ $nodenumber &lt; 4 ]] ; then
    export nodenumber=4
  fi

  # for now disable ceph deployment in HA mode explicitly
  # it would need 5 nodes (2 for the cluster + 3 nodes for compute and ceph)
  #### temorarily allow ceph in HA (test if it works)
  #export want_ceph=0
  #export cephvolumenumber=0
fi


#storage
case "$storage_method" in
  none)
    want_ceph=0
    want_swift=0
    ;;
  swift)
    want_ceph=0
    want_swift=1
    ;;
  ceph)
    want_ceph=1
    want_swift=0
    if [[ $nodenumber &lt; 5 ]] ; then
      export nodenumber=5
    fi
    cephvolumenumber=2
    ;;
  *)
    unset want_ceph
    unset want_swift
esac
export want_ceph
export want_swift

if [ ! -z "$UPDATEREPOS" ] ; then
  # testing update only makes sense with GM and without TESTHEAD
#  unset TESTHEAD
#  export cloudsource=GM
  export UPDATEREPOS=${UPDATEREPOS//$'\n'/+}
fi


# automation bootstrapping
if ! [ -e ${automationrepo}/scripts/jenkins/update_automation ] ; then
  rm -rf ${automationrepo}
  curl https://raw.githubusercontent.com/SUSE-Cloud/automation/master/scripts/jenkins/update_automation | bash
fi
# fetch the latest automation updates
${automationrepo}/scripts/jenkins/update_automation #NO PARAMETERS HERE ANY MORE!!!


function mkcloudgating_trap()
{
    $ghs -a set-status -s "failure" -r $github_pr_repo -t $BUILD_URL -c $github_pr_sha --context $ghs_context
}

## mkcloud github PR gating
if [[ $github_pr ]] ; then
    github_opts=(${github_pr//:/ })
    github_pr_repo=${github_opts[0]}
    github_pr_id=${github_opts[1]}
    github_pr_sha=${github_opts[2]}
    github_pr_context=${github_opts[4]}
    ghs_context=ci.suse.de/openstack-mkcloud/gating
    if [[ $github_pr_context ]] ; then
      ghs_context=$ghs_context/$github_pr_context
    fi

    echo "testing PR: https://github.com/$github_pr_repo/pull/$github_pr_id"
    ghs=${automationrepo}/scripts/github-status/github-status.rb
    zypper -n install "rubygem(netrc)" "rubygem(octokit)"

    if ! $ghs -r $github_pr_repo -a is-latest-sha -p $github_pr_id -c $github_pr_sha ; then
        $ghs -a set-status -s "error" -t $BUILD_URL -r $github_pr_repo -c $github_pr_sha -m "SHA1 mismatch, newer commit exists" --context $ghs_context
        exit 1
    fi

    trap "mkcloudgating_trap" ERR

    # Support for automation self-gating
    if [[ "$github_pr_repo" = "SUSE-Cloud/automation" ]]; then
        automationrepo_orig=$automationrepo
        pr_dir=`mktemp -d $WORKSPACE/SUSE-Cloud.automation.XXXXXX`
        automationrepo=$pr_dir/automation

        mkdir -p $automationrepo
        rsync -a ${automationrepo_orig%/}/ $automationrepo/
        pushd $automationrepo
        ghremote=origin
        git config --get-all remote.${ghremote}.fetch | grep -q pull || \
            git config --add remote.${ghremote}.fetch "+refs/pull/*/head:refs/remotes/${ghremote}/pr/*"
        git fetch $ghremote
        git checkout -t $ghremote/pr/$github_pr_id
        echo "we merge to always test what will end up in master"
        git merge master -m temp-merge-commit
        # show latest commit in log to see what's really tested
        git --no-pager show
        popd
    elif [[ "$github_pr_repo" = "SUSE-Cloud/cct" ]]; then
        export want_cct_pr=$github_pr_id
    fi

    $ghs -a set-status -s "pending" -r $github_pr_repo -t $BUILD_URL -c $github_pr_sha --context $ghs_context

fi

echo "########################################################################"
env
echo "########################################################################"

MKCLOUDTARGET=$mkcloudtarget
[ $UPDATEBEFOREINSTALL == "true" ] &amp;&amp; MKCLOUDTARGET='cleanup prepare setupadmin addupdaterepo instcrowbar setupcompute instcompute proposal testsetup'


if [ $WITHCROWBARREGISTER == "true" ] ; then
  export nodenumberlonelynode=1
  [ $(uname -m) = s390x ] &amp;&amp; {
      export nodenumberlonelynode=$nodenumber
      export nodenumber=0
  }
  MKCLOUDTARGET+=" setuplonelynodes crowbar_register"
fi

if [ -e mkcloud.pid ] ; then
    kill -KILL -`mkcloud.pid` ||: # make sure that the previous mkcloud (and subprocesses) are dead
fi
starttime=`date +%s`

mkcloudwrapper="${automationrepo}/scripts/mkcloudhost/allocpool ${automationrepo}/scripts/mkcloudhost/mkcloude"
#FIXME - drop next 3 lines once the change in allocpool is merged
if grep -q "exec.*mkcloude" ${automationrepo}/scripts/mkcloudhost/allocpool ; then
    mkcloudwrapper=${automationrepo}/scripts/mkcloudhost/allocpool
fi

# Shut down the cloud to save resources
##MKCLOUDTARGET+=" cleanup"

perl -e "alarm 4*60*60 ; exec '${mkcloudwrapper} bash -x ${automationrepo}/scripts/mkcloud setuphost $(echo -n $MKCLOUDTARGET) ' " | tee $artifacts_dir/mkcloud_short_stdout.log
ret=${PIPESTATUS[0]}
if [[ $ret != 0 ]] ; then
    [[ $github_pr_sha ]] &amp;&amp; mkcloudgating_trap
    echo "mkcloud ret=$ret"
    exit $ret # check return code before tee
fi

# report mkcloud-gating status
if [[ $github_pr_sha ]] ; then
  $ghs -r $github_pr_repo -a set-status -s "success" -t $BUILD_URL -c $github_pr_sha --context $ghs_context
  trap "-" ERR
fi

</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>.artifacts/**</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.tasks.Mailer plugin="mailer@">
      <recipients/>
      <dontNotifyEveryUnstableBuild>true</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <hudson.plugins.build__timeout.BuildTimeoutWrapper plugin="build-timeout@">
      <strategy class="hudson.plugins.build_timeout.impl.NoActivityTimeOutStrategy">
        <timeoutSecondsString>3600</timeoutSecondsString>
      </strategy>
      <operationList>
        <hudson.plugins.build__timeout.operations.FailOperation/>
      </operationList>
    </hudson.plugins.build__timeout.BuildTimeoutWrapper>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@"/>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@">
      <template>#${BUILD_NUMBER}: ${ENV,var="cloudsource"} (${ENV,var="nodenumber"}/${ENV,var="networkingplugin"}/${ENV,var="tempestoptions"}/${ENV,var="mkcloudtarget"}/${ENV,var="github_pr"} ${ENV,var="hacloud"})</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>
