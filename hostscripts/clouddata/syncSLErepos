#!/bin/bash

# SITE to use. Can be "nue" or "prv" (Nuermberg and Provo)
: ${SITE:="nue"}

# The IBS source in Nuermberg
ibs_source_nue="rsync://dist.nue.suse.com/repos/"
# The install source in Nuermberg
# ("mount dist.nue.suse.com:/dist /mnt/dist/")
# For rsync, needs https://infra.nue.suse.com/SelfService/Display.html?id=90326
install_source_nue="/mnt/dist/install/"

# The IBS source for Provo (NFS not provided - see https://infra.nue.suse.com/SelfService/Display.html?id=90350
ibs_source_prv="rsync://ibs-mirror.prv.suse.net/dist/ibs/"
# The install source in Provo
install_source_prv="rsync://ibs-mirror.prv.suse.net/dist/install/"

if [ $SITE = "nue" ]; then
    ibs_source=$ibs_source_nue
    install_source=$install_source_nue
    archs="x86_64 s390x aarch64"
    rsync_delete="--delete-delay"
elif [ $SITE = "prv" ]; then
    ibs_source=$ibs_source_prv
    install_source=$install_source_prv
    # we do not need anything other that x86_64 in provo currently
    archs=x86_64
    # We currently do not sync with delete to provo as there is
    # some stuff not available in the provo ibs mirror and it would
    # then disappear
    rsync_delete=""
else
    echo "Invalid site $SITE"
    exit 1
fi

# disable/debug rsync with E=echo
E=echo
E=

# disable/debug {u,}mount with M=echo
M=echo
M=

# debug/test rsync with DRY=--dry-run
DRY=--dry-run
DRY=

rsync="$E rsync $DRY --bwlimit 10000 --delay-updates $rsync_delete -aH --no-owner --no-group --exclude=*src.rpm "

# http://download.suse.de/ibs/Devel:/Cloud:/4/images/*qcow2 -> images/SLES11-SP3-x86_64-cfntools.qcow2

ibsmaint=${ibs_source}/SUSE\:/Maintenance\:/Test\:/

mkdirrsync()
{
    local src=$1
    local dest=$2
    mkdir -p "$dest"
    $rsync "$src" "$dest"
}

##############
# SLE 12
##############

for servicepack in 1 2 3; do
    # fetch latest code from service pack in development (not just latest beta)
    sync_from_ibs=
    [ $servicepack -eq 4 ] && sync_from_ibs=1

    version="12-SP$servicepack"
    repo_version="$version"
    chef_version="12.$servicepack"

    for arch in $archs; do
        # only x86_64 for SP0
        [ "$arch" != x86_64 -a $servicepack -eq 0 ] && continue
        [ "$arch" = "aarch64" -a $servicepack -eq 1 ] && continue

        echo ================== Updating SLE 12 SP$servicepack for $arch

        destdir_install=/srv/nfs/install/suse-${chef_version}/$arch/install/
        mkdir -p $destdir_install
        if test -d /mnt/dist/install/SLP/SLE-$version-Server-GM/$arch/DVD1/ ; then
            $rsync /mnt/dist/install/SLP/SLE-$version-Server-GM/$arch/DVD1/ $destdir_install
        else
            $rsync /mnt/dist/install/SLP/SLE-$version-Server-TEST/$arch/DVD1/ $destdir_install
        fi

        # SLES pool
        destdir_sles_pool=/srv/nfs/repos/$arch/SLES$repo_version-Pool/
        mkdir -p $destdir_sles_pool
        if [ -z "$sync_from_ibs" ]; then
            $rsync --link-dest /srv/nfs/install/suse-${chef_version}/$arch/install/suse/ ${ibs_source}/SUSE/Products/SLE-SERVER/$version/$arch/product/ $destdir_sles_pool
        else
            $rsync --link-dest /srv/nfs/install/suse-${chef_version}/$arch/install/suse/ ${ibs_source}/SUSE\:/SLE-$version\:/GA/images/repo/SLE-$version-Server-POOL-$arch-Media1/ $destdir_sles_pool
        fi
        # SLES updates
        mkdirrsync ${ibs_source}/SUSE/Updates/SLE-SERVER/$version/$arch/update/ \
            /srv/nfs/repos/$arch/SLES$repo_version-Updates/
        # SLES test updates
        mkdirrsync $ibsmaint/SLE-SERVER\:/$version\:/$arch/update/ \
            /srv/nfs/repos/$arch/SLES$repo_version-Updates-test/

        # HA is not for ARM
        if [ "$arch" != aarch64 ]; then
            # HA pool
            destdir_ha_pool=/srv/nfs/repos/$arch/SLE$repo_version-HA-Pool/
            mkdir -p $destdir_ha_pool
            if [ -z "$sync_from_ibs" ]; then
                $rsync ${ibs_source}/SUSE/Products/SLE-HA/$version/$arch/product/ $destdir_ha_pool
            else
                $rsync ${ibs_source}/SUSE\:/SLE-$version\:/GA/images/repo/SLE-$version-HA-POOL-$arch-Media1/ $destdir_ha_pool
            fi
            # HA updates
            mkdirrsync ${ibs_source}/SUSE/Updates/SLE-HA/$version/$arch/update/ \
                /srv/nfs/repos/$arch/SLE$repo_version-HA-Updates/
            # HA test updates
            mkdirrsync $ibsmaint/SLE-HA\:/$version\:/$arch/update/ \
                /srv/nfs/repos/$arch/SLE$repo_version-HA-Updates-test/
        fi

        # SDK is not for ARM
        if [ "$arch" != aarch64 ]; then
            # SDK pool
            destdir_sdk_pool=/srv/nfs/repos/$arch/SLE$repo_version-SDK-Pool/
            mkdir -p $destdir_sdk_pool
            if [ -z "$sync_from_ibs" ]; then
                $rsync ${ibs_source}/SUSE/Products/SLE-SDK/$version/$arch/product/ $destdir_sdk_pool
            else
                $rsync ${ibs_source}/SUSE\:/SLE-$version\:/GA/images/repo/SLE-$version-SDK-POOL-$arch-Media1/ $destdir_sdk_pool
            fi
            # SDK updates
            mkdirrsync ${ibs_source}/SUSE/Updates/SLE-SDK/$version/$arch/update/ \
                /srv/nfs/repos/$arch/SLE$repo_version-SDK-Updates/
            # SDK test updates
            mkdirrsync $ibsmaint/SLE-SDK\:/$version\:/$arch/update/ \
                /srv/nfs/repos/$arch/SLE$repo_version-SDK-Updates-test/
        fi
    done
done


##############
# Storage
##############

for version in 2.1 4 5; do

    for arch in x86_64 aarch64; do
        [ "$arch" != x86_64 -a $version = 2.1 ] && continue

        echo ================== Updating Storage $version

        # sync version 5 from ibs while in development
        poolsource=
        if [[ $version == 5 ]]; then
            poolsource=${ibs_source}/SUSE\:/SLE-12-SP3\:/Update\:/Products\:/SES${version}/images/repo/SUSE-Enterprise-Storage-${version}-POOL-${arch}-Media1/
        else
            poolsource=${ibs_source}/SUSE/Products/Storage/$version/$arch/product/
        fi
        mkdirrsync $poolsource \
            /srv/nfs/repos/$arch/SUSE-Enterprise-Storage-$version-Pool
        mkdirrsync ${ibs_source}/SUSE/Updates/Storage/$version/$arch/update/ \
            /srv/nfs/repos/$arch/SUSE-Enterprise-Storage-$version-Updates
        mkdirrsync $ibsmaint/Storage\:/$version\:/$arch/update/ \
            /srv/nfs/repos/$arch/SUSE-Enterprise-Storage-$version-Updates-test
    done
done


##############
# Cloud
##############

function mount_and_rsync {
    local from=$1
    local to=$2
    local oneiso=`ls $from | tail -1`
    if [ -e "$oneiso" ] ; then
        $M mount -o loop,ro "$oneiso" /mnt/cloud
        [ $? == 0 ] && $rsync /mnt/cloud/ /srv/nfs/repos/$to/
        $M umount /mnt/cloud
    fi
}

# mirror aarch64 SP1 builds
$rsync /mnt/dist/ibs/Devel:/ARM:/SLE-12-SP1:/Update/images/repo/SLE-12-SP1-Server-POOL-aarch64-*-Media1/ /srv/nfs/repos/aarch64/SLES12-SP1-Pool

for version in 6 7 8; do
    # fetch latest code from version in development (not just latest beta)
    sync_from_ibs=
    [ "$version" == "8" ] && sync_from_ibs=1
    servicepack=1
    [ "$version" == "7" ] && servicepack=2
    [ "$version" == "8" ] && servicepack=3

    for arch in $archs; do
        # no ARM for Cloud <= 6
        [ "$arch" == aarch64 -a $version -le 6 ] && continue

        echo ================== Updating Cloud $version for $arch

        if [ -z "$sync_from_ibs" ]; then
            $rsync /mnt/dist/install/SLP/SLE-12-SP$servicepack-Cloud$version-GM/$arch/DVD1/ /srv/nfs/repos/$arch/SUSE-OpenStack-Cloud-$version-official
        else
            mount_and_rsync "/mnt/dist/ibs/SUSE:/SLE-12-SP$servicepack:/Update:/Products:/Cloud$version/images/iso/SUSE-OPENSTACK-CLOUD-$version-$arch-Build[0-9][0-9][0-9][0-9]-Media1.iso" $arch/SUSE-OpenStack-Cloud-$version-official
        fi

        mount_and_rsync "/mnt/dist/ibs/Devel\:/Cloud\:/$version/images/iso/SUSE-OPENSTACK-CLOUD-$version-$arch-Build[0-9][0-9][0-9][0-9]-Media1.iso" $arch/SUSE-OpenStack-Cloud-$version-devel
        mount_and_rsync "/mnt/dist/ibs/Devel\:/Cloud\:/$version\:/Staging/images/iso/SUSE-OPENSTACK-CLOUD-$version-$arch-Build[0-9][0-9][0-9][0-9]-Media1.iso" $arch/SUSE-OpenStack-Cloud-$version-devel-staging

        mkdirrsync ${ibs_source}/SUSE/Products/OpenStack-Cloud/$version/$arch/product/ \
            /srv/nfs/repos/$arch/SUSE-OpenStack-Cloud-$version-Pool/
        mkdirrsync ${ibs_source}/SUSE/Updates/OpenStack-Cloud/$version/$arch/update/ \
            /srv/nfs/repos/$arch/SUSE-OpenStack-Cloud-$version-Updates/
        mkdirrsync $ibsmaint/OpenStack-Cloud\:/$version\:/$arch/update/ \
            /srv/nfs/repos/$arch/SUSE-OpenStack-Cloud-$version-Updates-test/
    done
done

# sync admin images
for arch in $archs ; do
    destdir_admin_images=/srv/nfs/images/$arch/
    mkdir -p $destdir_admin_images
    $rsync -L ${ibs_source}/Devel:/Cloud:/Images/images_SLE_12_SP2/mkcloud-admin-node-SLE12SP2.${arch}.qcow2 $destdir_admin_images/SLES12-SP2-untested.qcow2

    $rsync -L ${ibs_source}/Devel:/Cloud:/Images/images_SLE_12_SP3/mkcloud-admin-node-SLE12SP3.${arch}.qcow2 $destdir_admin_images/SLES12-SP3-untested.qcow2

    if [ "$arch" == x86_64 ]; then
        $rsync -L ${ibs_source}/Devel:/Cloud:/Images/images_SLE_12_SP2/mkcloud-admin-node-SLE12SP2-uefi.${arch}.qcow2 $destdir_admin_images/SLES12-SP2-uefi.qcow2
    fi
done

# reduce disk usage
fdupes -q -n -r /srv/nfs/repos/ /srv/nfs/install/ |
    while read _file; do
        if test -z "$_target" ; then
            _target="$_file";
        else
            if test -z "$_file" ; then
                _target="";
                continue ;
            fi
            ln -f "$_target" "$_file";
        fi
     done

~/bin/syncgitrepos
