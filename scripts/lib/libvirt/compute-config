#!/usr/bin/env python
import argparse
import os

import libvirt_setup


def main():
    parser = argparse.ArgumentParser(description="Create Compute Node Config.")
    parser.add_argument("cloud", help="Name of the Cloud")
    parser.add_argument("nodecounter", type=int,
                        help="Node Counter \
                        (when this script is called within a loop, this \
                        is usually an incremented number)")
    parser.add_argument("macaddress", help="MAC Address")
    parser.add_argument("controller_raid_volumes", type=int,
                        help="Number of disks for RAID on controller node")
    parser.add_argument("cephvolumenumber", type=int,
                        help="Number of Ceph Volumes")
    parser.add_argument("drbdserial", help="DRBD Volume Serial")
    parser.add_argument("computenodememory", type=int,
                        help="Compute Node Memory (kB)")
    parser.add_argument("controllernodememory", type=int,
                        help="Controller Node Memory (kB)")
    parser.add_argument("libvirttype", help="Libvirt Type (e.g. kvm)")
    parser.add_argument("vcpus", type=int, help="Number of VCPUs")
    parser.add_argument("emulator",
                        help="Emulator (e.g. /usr/bin/qemu-system-x86_64)")
    parser.add_argument("vdiskdir",
                        help="Virtual Disk Directory (e.g /dev/cloud)")
    parser.add_argument("bootorder", type=int, help="Boot Order (e.g. 2)")
    args = parser.parse_args()

    # to workaround bnc#946020+bnc#946068 we use the 2.0 machine type
    # if it is available
    machine = "pc-i440fx-2.0"
    if os.system("qemu-kvm -machine \? | grep -q "+machine) != 0:
        machine = None
    print(libvirt_setup.compute_config(args, libvirt_setup.cpuflags(),
                                       machine))


if __name__ == "__main__":
    main()
