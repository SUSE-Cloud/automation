<?xml version="1.0" encoding="UTF-8"?>
<matrix-project>
  <actions/>
  <description>update OBS packages from git or tarballs via OBS _service feature</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>14</daysToKeep>
    <numToKeep>10</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@1.8.2">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>cloud-trackupstream</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 1 * * *</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <axes>
    <hudson.matrix.TextAxis>
      <name>project</name>
      <values>
        <string>Cloud:OpenStack:Havana:Staging</string>
        <string>Cloud:OpenStack:Icehouse:Staging</string>
        <string>Cloud:OpenStack:Master</string>
      </values>
    </hudson.matrix.TextAxis>
    <hudson.matrix.TextAxis>
      <name>component</name>
      <values>
        <string>openstack-ceilometer</string>
        <string>openstack-cinder</string>
        <string>openstack-dashboard</string>
        <string>openstack-designate</string>
        <string>openstack-glance</string>
        <string>openstack-heat</string>
        <string>openstack-heat-cfntools</string>
        <string>openstack-heat-templates</string>
        <string>openstack-ironic</string>
        <string>openstack-trove</string>
        <string>openstack-keystone</string>
        <string>openstack-manila</string>
        <string>openstack-marconi</string>
        <string>openstack-nova</string>
        <string>openstack-neutron</string>
        <string>openstack-quickstart</string>
        <string>openstack-resource-agents</string>
        <string>openstack-swift</string>
        <string>openstack-tempest</string>
        <string>openstack-tuskar</string>
        <string>openstack-tuskar_ui</string>
        <string>openstack-utils</string>
        <string>python-ceilometerclient</string>
        <string>python-cinderclient</string>
        <string>python-designateclient</string>
        <string>python-glanceclient</string>
        <string>python-heatclient</string>
        <string>python-ironicclient</string>
        <string>python-keystoneclient</string>
        <string>python-marconiclient</string>
        <string>python-novaclient</string>
        <string>python-manilaclient</string>
        <string>python-oslo.config</string>
        <string>python-oslo.messaging</string>
        <string>python-oslosphinx</string>
        <string>python-oslo.rootwrap</string>
        <string>python-openstackclient</string>
        <string>python-neutronclient</string>
        <string>python-swift3</string>
        <string>python-swiftclient</string>
        <string>python-tuskarclient</string>
        <string>python-troveclient</string>
        <string>tripleo-image-elements</string>
        <string>tripleo-heat-templates</string>
        <string>diskimage-builder</string>
      </values>
    </hudson.matrix.TextAxis>
    <hudson.matrix.LabelAxis>
      <name>label</name>
      <values>
        <string>cloud-trackupstream</string>
      </values>
    </hudson.matrix.LabelAxis>
  </axes>
  <combinationFilter>! ( ["Cloud:OpenStack:Havana:Staging"].contains(project)           &amp;&amp;  ["openstack-trove", "python-designateclient", "openstack-utils", "python-manilaclient", "openstack-manila"].contains(component)       || ["Cloud:OpenStack:Havana:Staging", "Cloud:OpenStack:Icehouse:Staging"].contains(project) &amp;&amp; [ "openstack-ironic", "openstack-tuskar", "openstack-tuskar_ui", "python-oslo.messaging", "python-oslosphinx", "python-oslo.rootwrap", "python-openstackclient", "python-tuskarclient", "python-troveclient", "tripleo-image-elements", "tripleo-heat-templates", "diskimage-builder", "openstack-designate", "openstack-marconi", "python-ironicclient", "python-marconiclient", "python-manilaclient", "openstack-manila"].contains(component)       || ["Cloud:OpenStack:Icehouse:Staging"].contains(project) &amp;&amp;  ["openstack-marconi", "python-tuskarclient", "python-troveclient", "python-ironicclient", "python-marconiclient", "python-oslo.config", "python-manilaclient", "openstack-manila" ].contains(component) )</combinationFilter>
  <builders>
    <hudson.tasks.Shell>
      <command>PROJECTSOURCE=OBS/${project}
COMPONENT=$component

# needs .oscrc with user,pass,trusted_prj
# zypper ar http://download.opensuse.org/repositories/openSUSE:/Tools/SLE_11_SP2/openSUSE:Tools.repo
# zypper ar http://download.opensuse.org/repositories/openSUSE:/Tools:/Unstable/SLE_11_SP2/openSUSE:Tools:Unstable.repo
# zypper in osc obs-service-tar_scm obs-service-github_tarballs obs-service-recompress obs-service-git_tarballs obs-service-set_version
[ -z "$PROJECTSOURCE" ] &amp;&amp; ( echo "Error: no PROJECTSOURCE defined." ; exit 1 )

mkdir -p ~/bin
[ -e ~/bin/update_automation ] || wget -O ~/bin/update_automation https://raw.github.com/SUSE-Cloud/automation/master/scripts/jenkins/update_automation &amp;&amp; chmod a+x ~/bin/update_automation
# fetch the latest automation updates
update_automation track-upstream-and-package.pl

OBS_TYPE=${PROJECTSOURCE%%/*}
OBS_PROJECT=${PROJECTSOURCE##*/}


case $OBS_TYPE in
  OBS) OSCAPI="https://api.opensuse.org"
       OSC_BUILD_ARCH=x86_64
       case $OBS_PROJECT in
           *)
               OSC_BUILD_DIST=SLE_11_SP3
               ;;
       esac
       ;;
  *)   echo "This jenkins instance only interacts with OBS."
       exit 1
       ;;
esac

# remove accidentally added spaces
COMPONENT=${COMPONENT// /}
OBS_PROJECT=${OBS_PROJECT// /}

if [ -z "$COMPONENT" ] ; then
  echo "Error: Variable COMPONENT is unset."
  exit 1
fi

export OSCAPI
export OSC_BUILD_DIST
export OSC_BUILD_ARCH

export JHOME=/home/jenkins
export OBS_CHECKOUT=$JHOME/OBS_CHECKOUT/$OBS_PROJECT
export OSC_BUILD_ROOT=$JHOME/buildroot

mkdir -p ~/.obs
for i in incoming repo repourl
do
  mkdir -p $JHOME/obscache/tar_scm/$i
done
echo "CACHEDIRECTORY=\"$JHOME/obscache/tar_scm\"" &gt; ~/.obs/tar_scm

mkdir -p "$OBS_CHECKOUT"
cd "$OBS_CHECKOUT"

rm -rf "$COMPONENT"
osc -A $OSCAPI co -c "$OBS_PROJECT" "$COMPONENT"

[ -d "$COMPONENT" ] || ( echo "Error: Component $COMPONENT does not exist (yet) or has been removed."  ; exit 1 )
cd "$COMPONENT"

set +e
if [ ${OBS_PROJECT} != "Cloud:OpenStack:Master" ] ; then
  # skip test in C:O:M as we do not have linked packages there
  grep -q "&lt;linkinfo" .osc/_files || exit 2
fi

# call script in /root/bin
track-upstream-and-package.pl</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers/>
  <executionStrategy class="hudson.matrix.DefaultMatrixExecutionStrategyImpl">
    <runSequentially>true</runSequentially>
  </executionStrategy>
</matrix-project>
