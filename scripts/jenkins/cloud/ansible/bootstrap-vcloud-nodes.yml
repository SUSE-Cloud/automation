#
# (c) Copyright 2018 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
---

- import_playbook: _create-vcloud-inventory.yml

- name: Bootstrap virtual deployer for ardana
  hosts: "{{ cloud_env }}"
  remote_user: ardana
  gather_facts: False
  vars:
    task: "deploy"

  tasks:
    - block:
        - name: Ensure ardana SSH key on deployer
          shell: |
            ssh-keygen -t rsa -f ~/.ssh/id_rsa -N ""
            cat .ssh/id_rsa.pub >> .ssh/authorized_keys
          args:
            creates: "~/.ssh/id_rsa"

        - name: Get ardana public key
          slurp:
            src: "~/.ssh/id_rsa.pub"
          register: ardana_pub_key

        - name: Enable skip_disk_config on deployer
          file:
            state: "{{ item.state }}"
            path: "{{ item.path }}"
          loop:
            - state: directory
              path: "/etc/openstack"
            - state: touch
              path: "/etc/openstack/skip_disk_config"
          become: yes
          when: not want_lvm
      rescue:
        - include_role:
            name: rocketchat_notify
          vars:
            rc_action: "finished"
            rc_state: "Failed"
          when: rc_notify

        - name: Stop if something failed
          fail:
            msg: "{{ task }} failed."


- name: Bootstrap other virtual nodes for ardana
  hosts: cloud_virt_hosts
  any_errors_fatal: true
  remote_user: root
  # NOTE: don't gather facts before nodes become accessible
  gather_facts: false
  vars:
    task: "deploy"

  tasks:
    - block:
        # Do not use the wait_for_connection module here as it is not reliable when
        # using mitogen through bastion hosts.
        - name: Wait for cloud nodes to be accessible
          delegate_to: localhost
          wait_for:
            host: "{{ ansible_ssh_host }}"
            port: 22
            search_regex: OpenSSH
            state: started
            delay: 10
          register: _connection

        - name: Fail if one or more hosts are unreacheable
          fail:
          when: hostvars[item]['_connection']['failed']
          loop: "{{ ansible_play_hosts_all }}"
          run_once: True

        - name: Gather facts
          setup:

        - include_role:
            name: setup_root_partition

        - name: Create ardana group
          group:
            name: "ardana"
            state: "present"

        - name: Create ardana user
          user:
            name: "ardana"
            group: "ardana"
            comment: "Ardana Home"
            shell: "/bin/bash"
            createhome: yes
            home: "/var/lib/ardana"

        - name: Allow passwordless sudo for ardana user
          lineinfile:
            path: "/etc/sudoers.d/ardana"
            line: "ardana ALL=(ALL) NOPASSWD: ALL"
            state: present
            create: yes
            validate: "visudo -cf %s"

        - name: Ensure .ssh directory
          file:
            state: directory
            path: "/var/lib/ardana/.ssh"
            owner: ardana
            group: ardana
            mode: 0700

        - name: Add ardana public key to authorized_keys
          lineinfile:
            path: "/var/lib/ardana/.ssh/authorized_keys"
            line: "{{ hostvars[cloud_env].ardana_pub_key.content | b64decode }}"
            state: present
            create: yes
            owner: ardana
            group: ardana
            mode: 0600

        - name: Enable skip_disk_config on non-deployer nodes
          file:
            state: "{{ item.state }}"
            path: "{{ item.path }}"
          loop:
            - state: directory
              path: "/etc/openstack"
            - state: touch
              path: "/etc/openstack/skip_disk_config"
          when: ansible_os_family == 'RedHat' or not want_lvm

        - name: Add CentOS repository
          yum_repository:
            name: CentOS-Base
            description: "CentOS Base Repository"
            gpgcheck: no
            baseurl: "http://{{ hostvars['localhost'].admin_conf_ip }}:79/ardana/rhel7/yum/OS"
          when: ansible_os_family == 'RedHat'
      rescue:
        - include_role:
            name: rocketchat_notify
            apply:
              delegate_to: "{{ cloud_env }}"
          vars:
            rc_action: "finished"
            rc_state: "Failed"
          when: rc_notify

        - name: Stop if something failed
          fail:
            msg: "{{ task }} failed."
