#
# (c) Copyright 2018 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
---
- name: Collect group_vars/all
  shell: "cat {{ ardana_ansible_root  | default('~/scratch/ansible/next/ardana/ansible') }}/group_vars/all"
  register: group_var_all_result

- name: Set local variable to hold group_vars/all
  set_fact:
    _ardana_group_vars_all: "{{ group_var_all_result.stdout | from_yaml }}"
  no_log: true

- name: Get the region name list
  set_fact:
    region_names: "{{ _ardana_group_vars_all.region_topology.regions.keys() }}"

- name: Set region to the one available in single region model
  set_fact:
    default_test_region: "{{ region_names[0] }}"
  when: (_ardana_group_vars_all.region_topology.regions.keys() | length) == 1

- name: Fail when region not found
  fail:
    msg: "Invalid region name set for testing. Please check default_test_region"
  when: default_test_region not in region_names

- name: Get ardana services list
  set_fact:
    _ardana_services_list: "{{ _ardana_group_vars_all.region_by_cp_by_service |
                         selectattr('region', 'equalto', default_test_region ) |
                         map(attribute='service_component') |
                         unique | list }}"

- name: Get control planes for the given region
  set_fact:
    region_control_planes:  "{{ _ardana_group_vars_all.region_by_cp_by_service |
                             selectattr('region', 'equalto', default_test_region ) |
                             map(attribute='control_plane') |
                             unique | list }}"

- name: Read the region files of QE interest
  shell: |
    cat {{ ardana_ansible_root  | default('~/scratch/ansible/next/ardana/ansible') }}/group_vars/*{{ item }}
  register: group_var_list
  with_items: "{{ region_control_planes }}"

- name: Set local variable to hold group_vars
  set_fact:
    _ardana_group_vars: "{{ item.stdout | from_yaml }}"
  no_log: true
  with_items: "{{ group_var_list.results }}"
  register: _ardana_group_var_list_result

- name: Build group_vars list
  set_fact:
    _ardana_group_vars: "{{ _ardana_group_var_list_result.results | map(attribute='ansible_facts._ardana_group_vars') | list }}"

- name: Set available ardana services
  set_fact:
    ardana_services:
      # Services available for test
      cinder_available: "{{ ( 'cinder-api' in _ardana_services_list ) }}"
      neutron_available: "{{ ( 'neutron-server' in _ardana_services_list ) }}"
      glance_available: "{{ ( 'glance-api' in _ardana_services_list ) }}"
      swift_available: "{{ ( 'swift-proxy' in _ardana_services_list ) }}"
      nova_available: "{{ ( 'nova-api' in _ardana_services_list ) }}"
      heat_available: "{{ ( 'heat-api' in _ardana_services_list ) }}"
      ceilometer_available: "{{ ( 'ceilometer-api' in _ardana_services_list ) }}"
      horizon_available: "{{ ( 'horizon' in _ardana_services_list ) }}"
      ironic_available: "{{ ( 'ironic-api' in _ardana_services_list ) }}"
      centralized_logging_available: "{{ ( 'logging-server' in _ardana_services_list ) }}"
      barbican_available: "{{ ( 'barbican-api' in _ardana_services_list ) }}"
      monasca_available: "{{ ( 'monasca-api' in _ardana_services_list ) }}"

- name: Build a dictionary to hold variables of interest to QE
  set_fact:
    ardana_group_vars_key_api:
      keystone_member_role: "{{ item.KEY_API.vars.keystone_member_role | default('member') }}"
      keystone_vip_protocol: "{{ item.KEY_API.advertises.vips.admin[0].protocol }}"
      keystone_admin_password: "{{ item.KEY_API.vars.keystone_admin_pwd }}"
      keystone_admin_vip_host: "{{ item.KEY_API.advertises.vips.admin[0].ip_address }}"
      keystone_private_vip_host: "{{ item.KEY_API.advertises.vips.private[0].ip_address }}"
      keystone_endpoint: "{{ item.KEY_API.advertises.vips.admin[0].protocol }}://{{ item.KEY_API.advertises.vips.admin[0].ip_address }}"
      keystone_endpoint_port: "{{ item.KEY_API.advertises.vips.private[0].port }}"
      keystone_admin_endpoint: "{{ item.KEY_API.advertises.vips.admin[0].protocol }}://{{ item.KEY_API.advertises.vips.admin[0].ip_address }}"
      keystone_admin_endpoint_port: "{{ item.KEY_API.advertises.vips.admin[0].port }}"
      keystone_admin_user: "{{ item.KEY_API.vars.keystone_admin_user }}"
      keystone_default_domain: "{{ item.KEY_API.vars.keystone_default_domain }}"
      keystone_admin_url: "{{ item.KEY_API.advertises.vips.admin[0].url}}"
      keystone_private_url: "{{ item.KEY_API.advertises.vips.private[0].url}}"
      keystone_public_url: "{{ item.KEY_API.advertises.vips.public[0].url}}"
      keystone_demo_user: "{{ item.KEY_API.vars.keystone_demo_user }}"
      keystone_demo_password: "{{ item.KEY_API.vars.keystone_demo_pwd }}"
  when: item.KEY_API is defined
  with_items: "{{ _ardana_group_vars }}"

- debug: var=ardana_group_vars_key_api

- name: Build a dictionary to hold variables specific to key_api nodes
  set_fact:
    ardana_group_vars_key_api_fnd_clu:
      keystone_node1: "{{ item.FND_CLU.has_proxy.KEY_API.servers[0] }}"
      keystone_node2: "{{ item.FND_CLU.has_proxy.KEY_API.servers[1] | default(item.FND_CLU.has_proxy.KEY_API.servers[0]) }}"
      keystone_node3: "{{ item.FND_CLU.has_proxy.KEY_API.servers[2] | default(item.FND_CLU.has_proxy.KEY_API.servers[0]) }}"
  when: (item.FND_CLU is defined) and (item.FND_CLU.has_proxy.KEY_API is defined)
  with_items: "{{ _ardana_group_vars }}"


- name: Build a dictionary to hold variables specific to mon_api nodes
  set_fact:
    ardana_group_vars_mon_api_fnd_clu:
      monasca_node1: "{{ item.FND_CLU.has_proxy.MON_API.servers[0] }}"
      monasca_node2: "{{ item.FND_CLU.has_proxy.MON_API.servers[1] | default(item.FND_CLU.has_proxy.MON_API.servers[0]) }}"
      monasca_node3: "{{ item.FND_CLU.has_proxy.MON_API.servers[2] | default(item.FND_CLU.has_proxy.MON_API.servers[0]) }}"
  when: ( ardana_services.monasca_available | bool ) and (item.FND_CLU is defined ) and (item.FND_CLU.has_proxy.MON_API is defined)
  with_items: "{{ _ardana_group_vars }}"

- name: Build a dictionary to hold variables specific to mon_api 
  set_fact:
    ardana_group_vars_mon_api:
      monasca_endpoint: "{{ ardana_group_vars_key_api.keystone_vip_protocol }}://{{ item.MON_API.advertises.vips.private[0].ip_address }}"
      monasca_port: "{{ item.MON_API.advertises.vips.private[0].port }}"
      monasca_user: "{{ item.MON_API.consumes_KEY_API.vars.keystone_monasca_user }}"
      monasca_password: "{{ item.MON_API.consumes_KEY_API.vars.keystone_monasca_password }}"
  when: ardana_services.monasca_available | bool and (item.MON_API is defined )
  with_items: "{{ _ardana_group_vars }}"
