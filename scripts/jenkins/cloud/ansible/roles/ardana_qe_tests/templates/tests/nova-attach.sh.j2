#!/bin/bash

# Wrapper script to execute cinder-tests-all
# within the venv
#
# Usage: nova-attach-and-move.py PLUS too many options to list

# since we don't know the specific volume type set up in cinder
# let's just say 'default' which means the cinder commands will
# in turn not specify volume-type.
backend="default"

test_name="nova-attach"
work_dir={{ ardana_qe_test_work_dir }}
test_dir={{ ardana_qe_tests_dir }}/ardana-qa-tests/cinder-new
test_log="$work_dir/${test_name}.log"

# see cinder-parallel sh file to see why we're doing this
venv_dir={{ ardana_qe_test_venv }}
subunit_log="$work_dir/${test_name}.subunit:$venv_dir"

# tests appens so start clean
rm $test_log
rm $subunit_log

# messy, if this is run before cinder, we need to run cinder-tests-all init to
# set up network AND do it the same way cinder.sh does.
cd $test_dir
source $HOME/keystone.osrc
openstack role add --user admin --project admin cinder_admin
$test_dir/cinder-tests-all $backend init | tee $test_log
if [ ! $? == 0 ]; then echo "ERROR"; exit 1; fi

# This is a hack because on a missing image (and other stuff) cinder-tests-all
# does NOT do an exit 1.  Changes will eventually be made
if [ `grep "does not exist" $test_log | wc -l` == 1 ]; then exit 1; fi

source $HOME/service.osrc

# get list of all images we want to test with
i=0
declare -a ids
declare -a names

IFS=$'\n'
for image in $(openstack image list | grep active); do
    if [[ ! $image =~ "cirros" ]] && [[ ! $image =~ "magnum" ]] && [[ ! $image =~ "manila" ]]; then continue; fi

    id=`echo $image | cut -d' ' -f2`
    name=`echo $image | cut -d' ' -f4`

    ids[$i]=$id
    names[$i]=$name
    i=$(( $i+1 ))
done

num_images=$(( $i-1 ))
echo "NUM: $num_images" | tee -a $test_log
for i in `seq 0 $num_images`; do
    echo "ID[$i]: ${ids[$i]}' NAME: ${names[$i]}" | tee -a $test_log
done

for i in `seq 0 $num_images`; do
    echo "ID[$i]: ${ids[$i]}' NAME: ${names[$i]}" | tee -a $test_log

    $test_dir/nova-attach-and-move.py --image ${ids[$i]} --sulog $subunit_log | tee -a $test_log
done

