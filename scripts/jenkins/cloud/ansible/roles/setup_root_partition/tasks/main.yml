#
# (c) Copyright 2015-2017 Hewlett Packard Enterprise Development LP
# (c) Copyright 2017 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Expand the partition backing the root file system of the VM to fill the
# disk and grow the root filesystem to an appropriate size to support the
# initial phases of an Ardana deployment before osconfig-run.yml applies
# the file system layout settings defined in the input model.
---

- name: Check for required tools
  shell: >
    command -v {{ item }}
  register: _which_result
  changed_when: False
  failed_when:
    - _which_result.rc > 1
  loop: "{{ resize_tools }}"

- name: Fail if required tools not found
  fail:
    # NOTE: blank line at start of msg text is intentional
    msg: |

      Required tools are missing from the SLES VM image:
      {% for r in _which_result.results %}
      {%   if r.rc %}
          {{ r.item }}
      {%   endif %}
      {% endfor %}
  when:
    - _which_result.results | selectattr("rc") | list | length > 0

- name: Setup root fs settings for non-LVM
  set_fact:
    root_fs_dev_path: "{{ root_mount.device }}"
    root_fs_dev_name: "{{ root_mount.device | basename }}"
  when:
    - not root_mount.device.startswith('/dev/mapper')

- name: Determine VG & LV for root device
  command: >
    lvs
      -o vg_name,lv_name
      --noheadings
      --nameprefixes
      --unquoted
      {{ root_mount.device }}
  register: _lvs_root_device_result
  when:
    - root_mount.device.startswith('/dev/mapper')

- name: Extract VG & LV for root filesystem
  set_fact:
    root_vg: "{{ _lvs_root_device_result.stdout.strip().split(' ')[0].split('=')[1] }}"
    root_lv: "{{ _lvs_root_device_result.stdout.strip().split(' ')[1].split('=')[1] }}"
  when:
    - root_mount.device.startswith('/dev/mapper')

- name: Determine PV backing root device
  command: >
    vgs
      -o pv_name
      --noheadings
      --nameprefixes
      --unquoted
      {{ root_vg }}
  register: _vgs_root_vg_result
  when:
    - root_mount.device.startswith('/dev/mapper')

- name: Extract PV backing root filesystem
  set_fact:
    root_pv: "{{ _vgs_root_vg_result.stdout.strip().split(' ')[0].split('=')[1] }}"
  when:
    - root_mount.device.startswith('/dev/mapper')

- name: Setup root fs settings for LVM
  set_fact:
    root_fs_dev_path: "{{ root_pv }}"
    root_fs_dev_name: "{{ root_pv | basename }}"
  when:
    - root_mount.device.startswith('/dev/mapper')

- name: Determine root fs base device
  # NOTE: using shell rather than command here because we want to expand
  # the given path using shell file globbing to find the desired entry
  # under /sys/block.
  shell: >
    readlink -e /sys/block/*/{{ root_fs_dev_name | quote }}
  register: _root_dev_sys_block_result

- name: Extract root fs base device
  set_fact:
    root_fs_base_dev: "/dev/{{ _root_dev_sys_block_result.stdout | dirname | basename }}"

- name: Determine root fs device partition
  command: >
    cat /sys/block/{{ root_fs_base_dev | basename | quote }}/{{
                      root_fs_dev_name | quote }}/partition
  register: _read_sys_block_partition_result

- name: Extract root fs device partition
  set_fact:
    root_fs_partition: "{{ _read_sys_block_partition_result.stdout | int }}"

- name: Print starting partition size
  command: parted --script {{ root_fs_base_dev }} print
  changed_when: false
  register: vm_partitions

- debug:
    var: vm_partitions.stdout

- name: Print starting filesystem size
  command: df -h /
  register: vm_filesystems
  changed_when: False

- debug:
    var: vm_filesystems.stdout

- name: Change fdisk start field number for single partition layout
  set_fact:
    vm_fdisk_start_field: 3
  when:
    - root_fs_partition | int == 1

- name: Check if disk is much larger than root partition
  shell: fdisk -l {{ root_fs_base_dev }} | awk -v DEV={{ root_fs_dev_path }}
      '$1 == "Disk" && $NF == "sectors" { total = $(NF-1) }
       $1 == DEV { used = $({{ vm_fdisk_start_field | int }}+1) }
       END { print int(total/used) }'
  register: vm_disk_size
  changed_when: False

- name: Get the start sector of the root partition
  shell: fdisk -l {{ root_fs_base_dev }} | awk -v DEV={{ root_fs_dev_path }}
      '$1 == DEV { print ${{ vm_fdisk_start_field | int }}; }'
  register: vm_partition_start
  when:
    - vm_disk_size.stdout != "inf"
    - (vm_disk_size.stdout | int) > 1
  failed_when: (vm_partition_start.stdout | int) == 0

- name: Grow root partition filesystem
  shell: |
    /usr/sbin/growpart {{ root_fs_base_dev }} {{ root_fs_partition }}
  register: vm_resize_partition
  when:
    - vm_partition_start.changed
    - (vm_disk_size.stdout | int) > 1

- name: Check root vol size
  shell: >
    lvdisplay {{ root_vg }}/{{ root_lv }} | grep "LV Size" | awk '{print $3}'
  register: lvm_root_size
  when:
    - root_mount.device.startswith('/dev/mapper')
  changed_when: False

- name: Resize pv if necessary
  command: pvresize {{ root_pv }}
  when:
    - root_mount.device.startswith('/dev/mapper')
    - (lvm_root_size.stdout | int) < (min_deployer_root_part_size | int)

- name: Resize lv if necessary
  command: lvresize -L {{ min_deployer_root_part_size }}G /dev/{{ root_vg }}/{{ root_lv }}
  register: _lvresize_output
  failed_when: ( _lvresize_output.rc != 0 ) and ( "matches existing size" not in _lvresize_output.stderr )
  when:
    - root_mount.device.startswith('/dev/mapper')
    - (lvm_root_size.stdout | int) < (min_deployer_root_part_size | int)

- name: Check root vol fstype
  shell: df --output=fstype "{{ root_mount.device }}"
  register: lvm_root_fstype

- name: Resize the filesystem
  command: resize2fs "{{ root_mount.device }}"
  register: vm_resize_filesystem
  when:
    - vm_resize_partition is not skipped
    - lvm_root_fstype.stdout.find('ext') != -1

- name: Resize the filesystem
  command: xfs_growfs "{{ root_mount.device }}"
  register: vm_resize_filesystem
  when:
    - vm_resize_partition is not skipped
    - lvm_root_fstype.stdout.find('xfs') != -1

- name: Print finishing partition size
  command: parted {{ root_fs_base_dev }} print
  register: vm_partitions
  when:
    - vm_resize_partition is not skipped

- debug:
    var: vm_partitions.stdout
  when:
    - vm_resize_partition is not skipped

- name: Print finishing filesystem size
  command: df -h /
  register: vm_filesystems
  when:
    - vm_resize_filesystem is not skipped

- debug:
    var: vm_filesystems.stdout
  when:
    - vm_resize_filesystem is not skipped
