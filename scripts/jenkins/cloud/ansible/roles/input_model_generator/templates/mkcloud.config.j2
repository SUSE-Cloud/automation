{% set ns = namespace() %}
{% include 'barclamps/lib/common.yml.j2' %}

# export debug_qa_crowbarsetup=0
# export debug_openstack=0

# export drbdnode_mac_vol=
export cloud={{ cloud_env }}
# hostnames of repo, nfs, rsync and smt servers
# (*_ip and *_fqdn suffix variables are computed automatically)
export reposerver={{ clouddata_server }}
# export reposerver_ip=
# export reposerver_fqdn=
# export reposerver_base_path=
# export reposerver_url=
# export imageserver_url=
# export nfsserver=
# export nfsserver_ip=
# export nfsserver_fqdn=
# export nfsserver_base_path=
# export rsyncserver=
# export rsyncserver_ip=
# export rsyncserver_fqdn=
# export rsyncserver_images_dir=
export susedownload={{ sles_media_server }}
export cloudfqdn={{ cloud_fqdn }}

{% if cloudsource.startswith("stagingcloud") %}
export cloudsource=develcloud{{ cloudsource[-1] }}
export TESTHEAD=1
{% else %}
export cloudsource={{ cloudsource }}
{% endif %}

# export mkclouddriver=
# export adminip=
export libvirt_type=physical
# export firmware_type=
# export networkingplugin=
# export networkingmode=
# export nosetestparameters=
# export tempestoptions=
export cephvolumenumber=1
# export controller_raid_volumes=
# export drbd_database_size=
# export drbd_rabbitmq_size=
# export shell=
# export keep_existing_hostname=
# export http_proxy=
# export https_proxy=
# export no_proxy=
# export cct_tests=
export scenario={{ admin_crowbar_batch_file }}

# export host_mtu=
# export architectures=

# export crowbar_networkingmode=

# export nova_shared_instance_storage=

# export localreposdir_target=

# export cinder_backend=
# export cinder_netapp_storage_protocol=
# export cinder_netapp_login=
# export cinder_netapp_password=

{% if extra_repos is defined and extra_repos | length > 0 != '' %}
export UPDATEREPOS={{ extra_repos.split(',') | join('+') }}
{% endif %}
# export UPDATEREPOS_UPGRADE=
# export UPDATEREPOS_EXTRA=
# export NOINSTALLCLOUDPATTERN=

# export clouddescription=
# export JENKINS_BUILD_URL=
# export JENKINS_NODE_NAME=
# export JENKINS_EXECUTOR_NUMBER=
# export JENKINS_WORKSPACE=
# export test_internet_url=
# export extraipmipw=
# export ipmi_ip_addrs=
# export bmc_user=
# export bmc_password=
# export upgrade_progress_file=

export nodenumber={{ ns.cloud_nodes }}
# export nodenumberlonelynode=
# export nodenumberironicnode=
{% if ns.hacloud %}
export hacloud=1
export clusterconfig="{{ ns.cluster_config | join(':') }}"
export want_sbd=1
{% endif %}
{% if ssl_enabled %}
export want_all_ssl=1
{% endif %}

# export ironicnetmask=

# Use this to override the crowbar node list order in qa_crowbarsetup.sh
export custom_crowbar_node_order=

export want_node_roles=controller={{ ns.controller_nodes }},compute={{ ns.compute_nodes }}
export want_node_aliases={{ ns.node_aliases | join(',') }}

export want_test_updates={{ updates_test_enabled | ternary (1, 0) }}
export want_swift=1

export want_ipv6={{ ipv6 | ternary (1, 0) }}

# FIXME: these need to be generated ouf of the scenario generator
# for now, set them to match the crowbar scenario

{% set ipsep = ipv6 | ternary (':', '.') %}
{% set subnet_prefix = ipv6 | ternary (subnet_prefix.ipv6, subnet_prefix.ipv4) %}

export net_public={{ subnet_prefix }}{{ ipsep }}{{ gen_subnet_start+1 }}
export net_sdn={{ subnet_prefix }}{{ ipsep }}{{ gen_subnet_start+2 }}
export net_storage={{ subnet_prefix }}{{ ipsep }}{{ gen_subnet_start+3 }}
export net_fixed={{ subnet_prefix }}{{ ipsep }}{{ gen_subnet_start+4 }}
export net_ceph={{ subnet_prefix }}{{ ipsep }}{{ gen_subnet_start+5 }}

export vlan_public={{ gen_subnet_start+1 }}
export vlan_sdn={{ gen_subnet_start+2 }}
export vlan_storage={{ gen_subnet_start+3 }}
export vlan_fixed={{ gen_subnet_start+4 }}
export vlan_ceph={{ gen_subnet_start+5 }}

# NOTE: might also need some of the other variables starting with vlan_ , want_ and net_
