---
- name: Post deployment checks
  hosts: ardana-{{ cloud_env }}
  remote_user: root
  gather_facts: False

  vars_files:
    - vars/main.yml

  tasks:
  - name: Initialise array tracking failures
    set_fact:
      failures: []

  - name: Initialise array tracking post-deployment checks failures
    set_fact:
      post_deploy_checks_failures: []

  - name: Take snapshot of modified/deleted rpm-owned files post deployment
    become: yes
    shell: |
      rpm -Va | grep -vxFf "{{ pre_deploy_rpm_verification }}" \
        > "{{ post_deploy_rpm_verification }}"
    failed_when: false
    register: rpm_verify_delta

  - name: Obtain list of rpm-owned files removed by deployment
    shell: |
      grep '^missing ' "{{ post_deploy_rpm_verification }}"
    failed_when: false
    register: rpm_verify_removed_files

  - name: Write list of known FIXMEs for incorrect modifications of rpm-owned files
    copy:
      src: rpm-verify-modification-whitelist.txt
      dest: "{{ rpm_verification_fixmes }}"

  - name: Trim comments and blank lines from FIXME file
    lineinfile:
      dest: "{{ rpm_verification_fixmes }}"
      regexp: '^(#|$)'
      state: absent

  - name: Write list of rpm %config files not endangered by update
    shell: |
      # Find all %config(noreplace) files, since if written to by
      # Ardana, these will be safely left in place by an update (the new
      # version would be written to a .rpmnew file).  Similarly include
      # ghost configs since presumably these would not pose problems
      # during an update.
      rpm -qa --qf '[%{filenames} ## %{fileflags:fflags}\n]' | \
        grep ' ## .*c.*[gn]' | \
        sed 's/ ## .*//' \
        > "{{ rpm_modifiable_config_files }}"

  - name: Write list of regexps matching rpm %config files not endangered by update
    shell: |
      # The files are written as a list of regexps into a file which can
      # be used with grep -vf as an exclusion list for the output of rpm -Va.
      sed 's/^/ /; s/$/$/' "{{ rpm_modifiable_config_files }}" \
        > "{{ rpm_modifiable_config_file_regexps }}"

  - name: Obtain list of rpm-owned files incorrectly modified by deployment
    # Exclude both the whitelist of fixmes (known issues), and config files
    # which we calculated above as being safe to modify.
    shell: |
      egrep -v '^missing' "{{ post_deploy_rpm_verification }}" | \
        grep -vf "{{ rpm_verification_fixmes }}" | \
        grep -vf "{{ rpm_modifiable_config_file_regexps }}"
    failed_when: false
    register: rpm_verify_modified_files

  - name: Check no rpm-owned files removed by deployment
    fail: msg="Found files removed by deployment:\n{{ rpm_verify_removed_files.stdout }}"
    when:
      - "rpm_verify_removed_files.stdout is match('^missing ')"
    ignore_errors: true

  - name: Record failure if rpm-owned files removed by deployment
    set_fact:
      post_deploy_checks_failures:
        "{{ post_deploy_checks_failures + [ 'rpm-owned files removed by deployment' ] }}"
    when:
      - "rpm_verify_removed_files.stdout is match('^missing ')"

  - name: Check no rpm-owned files modified by deployment
    fail: msg="Found files modified by deployment:\n{{ rpm_verify_modified_files.stdout }}"
    when:
      - "rpm_verify_modified_files.stdout != ''"
    ignore_errors: true

  - name: Record failure if rpm-owned files modified by deployment
    set_fact:
      post_deploy_checks_failures:
        "{{ post_deploy_checks_failures + [ 'rpm-owned files modified by deployment' ] }}"
    when:
      - "rpm_verify_modified_files.stdout != ''"

  - name: Write list of known FIXMEs for incorrect modifications of rpm-owned files
    copy:
      src: rpm-added-files-whitelist.txt
      dest: "{{ rpm_added_files_whitelist }}"

  - name: Trim comments and blank lines from rpm added files white-list
    lineinfile:
      dest: "{{ rpm_added_files_whitelist }}"
      regexp: '^(#|$)'
      state: absent

  - name: Check for rogue files introduced by deployment which are not owned by a package
    shell: |
      ! find /usr -printf "%p -> %l\n" | \
        egrep -vf "{{ rpm_added_files_whitelist }}" | \
        sed 's/ -> .*//' | \
        xargs -r -d '\n' rpm -qf | \
        grep -vxFf "{{ pre_deploy_unowned_files }}" | \
        grep "is not owned"
    register: rogue_files
    ignore_errors: true

  - name: Record failure if rogue files introduced by deployment
    set_fact:
      post_deploy_checks_failures:
        "{{ post_deploy_checks_failures + [ 'Rogue files introduced by deployment' ] }}"
    when:
      - rogue_files is failed

  - name: Remove temporary directory if not running in test mode and all checks succeeded
    become: yes
    file:
      path: "{{ verification_temp_dir }}"
      state: absent
    when:
      - rpm_verification_test_mode is not defined
      - post_deploy_checks_failures|length == 0

  # If you change the below, also change test-post-deployment-checks.yml to match!
  - name: Record any failures of post-deployment checks
    set_fact:
      failures: "{{ failures + post_deploy_checks_failures }}"

  - name: Report any failures
    fail:
      msg: |
        {{failures|length}} failures:
        {% for failure in failures %}
        {{ failure }}
        {% endfor %}
    when: failures|length > 0
