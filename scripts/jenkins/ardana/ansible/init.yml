---
- name: Initialize the Deployer
  hosts: ardana-{{ ardana_env }}
  remote_user: root
  gather_facts: True

  vars_files:
    - vars/main.yml

  tasks:

  - name: Add build information to /etc/motd
    shell: |
      echo "Build job:  {{ build_url }}" >>/etc/motd

  - name: Call ardana-init
    shell: /usr/bin/ardana-init
    environment:
      ARDANA_INIT_AUTO: 1
    become: true
    become_user: ardana

  - name: Create ssh key for ardana user on deployer
    shell: |
      [ -f ~/.ssh/id_rsa ] || ssh-keygen -t rsa -f ~/.ssh/id_rsa -N ""
      [ -f ~/.ssh/authorized_keys ] || touch ~/.ssh/authorized_keys
    become: true
    become_user: ardana

  - name: Copy authorized keys from root to ardana user on deployer
    shell: |
      cat ~root/.ssh/authorized_keys ~ardana/.ssh/authorized_keys | sort -u -o ~ardana/.ssh/authorized_keys
    become: true

  - name: Create ssh key for root user on deployer
    shell: |
      [ -f ~/.ssh/id_rsa ] || ssh-keygen -t rsa -f ~/.ssh/id_rsa -N ""

  - name: Copy root key to non-deployer nodes
    script: files/sshpass.sh ssh-copy-id {{ item }}
    with_items:
      - "{{ controller_mgmt_ips|default([]) }}"
      - "{{ compute_mgmt_ips|default([]) }}"
    ignore_errors: True
    when: item != "" and item != deployer_mgmt_ip
    environment:
      SSHPASS: linux

  - name: Create ardana user/group on non-deployer nodes
    shell: |
      ssh -o ConnectionAttempts=120 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@{{ item }} "getent group ardana || groupadd -r ardana"
      ssh -o ConnectionAttempts=120 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@{{ item }} "getent passwd ardana || useradd -m -g ardana -d /var/lib/ardana -c 'Ardana Home' -r -s /bin/bash ardana"
      ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  root@{{ item }} mkdir -p /var/lib/ardana/.ssh/
      scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  ~ardana/.ssh/id_rsa.pub root@{{ item }}:/var/lib/ardana/.ssh/authorized_keys
      ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  root@{{ item }} chown -R ardana: /var/lib/ardana/.ssh/
      scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  /etc/sudoers.d/ardana root@{{ item }}:/etc/sudoers.d/ardana
    with_items:
      - "{{ controller_mgmt_ips|default([]) }}"
      - "{{ compute_mgmt_ips|default([]) }}"
    when: item != "" and item != deployer_mgmt_ip

  # osconfig-ansible should take care of installing the repositories itself,
  # it's just that it won't auto accept the Devel key, so do that now
  - name: Import Devel:Cloud:X key
    shell: |
      kf={{ local_repos_base_dir }}/Cloud/repodata/repomd.xml.key
      [ -r $kf ] || kf={{ local_repos_base_dir }}/Cloud/content.key
      ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no root@{{ item }} "cat >/tmp/cloud.key && rpm --import /tmp/cloud.key && rm /tmp/cloud.key" < $kf
    with_items:
      - "{{ controller_mgmt_ips|default([]) }}"
      - "{{ compute_mgmt_ips|default([]) }}"
    when: item != "" and item != deployer_mgmt_ip

  - name: Grow 1st partition filesystem on non-deployer nodes
    shell: |
      ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  root@{{ item }} "/usr/sbin/growpart /dev/vda 1 && /sbin/resize2fs /dev/vda1"
    ignore_errors: True
    with_items:
      - "{{ controller_mgmt_ips|default([]) }}"
      - "{{ compute_mgmt_ips|default([]) }}"
    when: item != "" and item != deployer_mgmt_ip

  - name: Remove manila from input model when manila not enabled
    replace:
      path: "{{ input_model_path }}/data/control_plane.yml"
      regexp: '(.*manila.*)'
      replace: '#\1'
    when: not versioned_features['manila'].enabled

  - name: Initialize target Model from "{{ input_model_path }}"
    synchronize:
      src: "{{ input_model_path }}/"
      dest: /var/lib/ardana/openstack/my_cloud/definition/
    become: true
    become_user: ardana
    tags:
      - create-ardana-input-model

  - name: Add my_cloud config to git
    shell: |
      git add -A
      git commit -q -m "Add custom config to git" || true
    args:
      chdir: /var/lib/ardana/openstack/ardana/ansible
    become: true
    become_user: ardana

  - name: Run config-processor-run.yml playbook
    shell: |
      ansible-playbook -v -i hosts/localhost -e encrypt="" -e rekey="" config-processor-run.yml
  #    no_log: True
    register: out
    args:
      chdir: /var/lib/ardana/openstack/ardana/ansible
    become: true
    become_user: ardana

  - name: Run ready-deployment.yml playbook
    shell: |
      ansible-playbook -v -i hosts/localhost ready-deployment.yml
    args:
      chdir: /var/lib/ardana/openstack/ardana/ansible
    become: true
    become_user: ardana

  - name: Enable skip_disk_config on deployer
    shell: |
      mkdir -p /etc/openstack/
      touch /etc/openstack/skip_disk_config

  - name: Enable skip_disk_config on computes
    # Using ardana + sudo here to avoid issues with remote root access after running site.yml
    # for the first time
    shell: |
      ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  {{ item }} sudo mkdir /etc/openstack/
      ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  {{ item }} sudo touch /etc/openstack/skip_disk_config
    with_items:
      - "{{ controller_mgmt_ips|default([]) }}"
      - "{{ compute_mgmt_ips|default([]) }}"
    become: true
    when: item != "" and item != deployer_mgmt_ip
    become_user: ardana
