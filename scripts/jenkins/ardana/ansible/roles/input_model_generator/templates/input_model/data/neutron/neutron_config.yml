#
# (c) Copyright 2018 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
---
  product:
    version: 2

  configuration-data:
    - name:  NEUTRON-CONFIG-CP1
      services:
        - neutron
      data:
{% if bm_info is defined %}
        neutron_provider_networks:
{{   bm_info.neutron.provider_networks | to_nice_yaml(indent=2) | indent(10, True) }}
{%   if bm_info.neutron.external_networks is defined %}
        neutron_external_networks:
{%   for external_network in bm_info.neutron.external_networks %}
          - {{ external_network | to_nice_yaml(indent=2) | indent(12, False) }}
{%     if not enable_external_network_bridge and 'provider' not in external_network %}
            provider:
            - network_type: flat
              physical_network: external{{ loop.index0 | ternary(loop.index0, '') }}
{%     endif %}
{%   endfor %}
{%   endif %}
{% else %}
        neutron_provider_networks:
{% set ns = namespace(mgmt_net_id=0, physnet_id=0, net_id=30, vlan_id=100+scenario.network_groups|length) %}
{% for network_group in scenario.network_groups %}
{%   if 'MANAGEMENT' in network_group.component_endpoints %}
{%     set ns.mgmt_net_id = loop.index0+100 %}
{%   endif %}
{% endfor  %}
{% for network_group in scenario.network_groups %}
{%   if 'NEUTRON-VLAN' in network_group.component_endpoints %}
{%     set ns.physnet_id = ns.physnet_id+1 %}

          - name: NEUTRON-{{ network_group.name|upper }}-VLAN-NET
            provider:
              - network_type: vlan
                physical_network: physnet{{ ns.physnet_id }}
                segmentation_id: {{ ns.vlan_id }}
            no_gateway:  True
            enable_dhcp: True
{% if (ipv6 | default(false)) == true %}
            cidr: fd00:0:0:{{ ns.net_id }}::/64
            allocation_pools:
              - start: fd00:0:0:{{ ns.net_id }}::10
                end: fd00:0:0:{{ ns.net_id }}::250
            host_routes:
              # route to management network
              - destination: fd00:0:0:{{ ns.mgmt_net_id }}::/64
                nexthop:  fd00:0:0:{{ ns.net_id }}::1
{%     set ns.net_id = ns.net_id+1 %}
{%     set ns.vlan_id = ns.vlan_id+1 %}
{% else %}
            cidr: 172.{{ ns.net_id }}.1.0/24
            allocation_pools:
              - start: 172.{{ ns.net_id }}.1.10
                end: 172.{{ ns.net_id }}.1.250
            host_routes:
            # route to management network
              - destination: 192.168.{{ ns.mgmt_net_id }}.0/24
                nexthop:  172.{{ ns.net_id }}.1.1
{%     set ns.net_id = ns.net_id+1 %}
{%     set ns.vlan_id = ns.vlan_id+1 %}
{%   endif %}
{%   endif %}
{% endfor %}
        neutron_external_networks:
{% for network_group in scenario.network_groups if 'NEUTRON-EXT' in network_group.component_endpoints %}
          - name: ext-net{{ loop.index0 | ternary(loop.index0, '') }}
{% if (ipv6 | default(false)) == true %}
            cidr: fd00:0:0:{{ ns.net_id }}::/64
            gateway-ip: fd00:0:0:{{ ns.net_id }}::1
{%     set ns.net_id = ns.net_id+1 %}
{% else %}
            cidr: 172.{{ ns.net_id }}.0.0/16
            gateway: 172.{{ ns.net_id }}.0.1
{%   if not enable_external_network_bridge %}
            provider:
            - network_type: flat
              physical_network: external{{ loop.index0 | ternary(loop.index0, '') }}
{%   endif %}
{%   set ns.net_id = ns.net_id+1 %}
{% endif %}
{% endfor %}
{% endif %}
