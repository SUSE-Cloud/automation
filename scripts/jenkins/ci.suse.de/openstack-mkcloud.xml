<?xml version="1.0" encoding="UTF-8"?>
<project>
  <actions/>
  <description>run https://github.com/SUSE-Cloud/automation/blob/master/scripts/mkcloud&#13;
&#13;
results are analyzed by https://github.com/SUSE-Cloud/automation/blob/master/scripts/jenkins/mkcloudresultcheck.pl on bwiedemann@trollolo.cloud.suse.de every 15 minutes</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>300</daysToKeep>
    <numToKeep>1000</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.security.AuthorizationMatrixProperty>
      <permission>hudson.scm.SCM.Tag:cloud</permission>
      <permission>hudson.model.Run.Delete:cloud</permission>
      <permission>hudson.model.Item.Read:anonymous</permission>
      <permission>hudson.model.Item.Read:cloud</permission>
      <permission>hudson.model.Item.Discover:cloud</permission>
      <permission>hudson.model.Item.Build:cloud</permission>
      <permission>hudson.model.Item.Cancel:cloud</permission>
      <permission>hudson.model.Item.Workspace:cloud</permission>
      <permission>hudson.model.Item.Delete:cloud</permission>
      <permission>hudson.model.Item.Configure:cloud</permission>
      <permission>hudson.model.Run.Update:cloud</permission>
    </hudson.security.AuthorizationMatrixProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>cloudsource</name>
          <description>Can be something like "develcloud3" (uses Devel:Cloud:*, see TESTHEAD parameter for Staging), "susecloud3" (uses SUSE:*), "GM3" (uses the GM ISO)</description>
          <defaultValue>develcloud5</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>mode</name>
          <description>mode=basetest is for use by special triggers. Success on such a run will trigger more runs on this cloudsource.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>standard</string>
              <string>basetest</string>
              <string>submit</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>mkcloudtarget</name>
          <description>Set mkcloudtarget to define the mkcloud command line parameters.</description>
          <defaultValue>all</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>libvirt_type</name>
          <description/>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>kvm</string>
              <string>xen</string>
              <string>hyperv</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>networkingplugin</name>
          <description/>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>openvswitch</string>
              <string>linuxbridge</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>networkingmode</name>
          <description/>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>gre</string>
              <string>vlan</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>automation_pr</name>
          <description>&lt;PRID&gt;:&lt;SHA1&gt; of PR to be tested (SHA1 must be latest commit in PR)
Usually this is automatically triggered via openstack-mkcloud-pr-trigger. SHA1 introduced to prevent accidental run of external PRs code.
PullRequest ID of github (see https://github.com/SUSE-Cloud/automation/pulls)
Setting a PullRequest ID will use the modified version of the mkcloud scripts. This is used for self-gating mkcloud changes.</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>UPDATEREPOS</name>
          <description>Update repositories (one URL per line)</description>
          <defaultValue/>
        </hudson.model.TextParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>UPDATEBEFOREINSTALL</name>
          <description>add update repos before crowbar install</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TESTHEAD</name>
          <description>if non-empty, test latest version from Devel:Cloud (:1.0)</description>
          <defaultValue>1</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>nodenumber</name>
          <description>number of nodes excl. admin-node 
minimum 2=controller+compute</description>
          <defaultValue>2</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>tempestoptions</name>
          <description>Additional options to pass to the "run_tempest.sh -N " step.
Use just "-t" for a full tempest run.
Default: -t -s.</description>
          <defaultValue>-t -s</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>want_sles12</name>
          <description>Set to 1 if sle12 nodes should be installed</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>upgrade_cloudsource</name>
          <description>In case of using upgrade, upgrade to that cloudsource version
</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>hacloud</name>
          <description>If hacloud=1 then deploy a 4-node cluster</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>WITHCROWBARREGISTER</name>
          <description>boot up one lonely node in the admin network and register it with crowbar_register (image type depends on want_sles12 parameter)</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>want_swift</name>
          <description>can be used for force off(0) or on(1)</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>want_ceph</name>
          <description>can be used for force off(0) or on(1)</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>want_all_ssl</name>
          <description>set to 1 to deploy all cloud services with SSL aka HTTPS</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>cinder_backend</name>
          <description/>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string> </string>
              <string>local</string>
              <string>raw</string>
              <string>rbd</string>
              <string>netapp</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>want_cindermultibackend</name>
          <description>enables deployment of more than one cinder backend</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>cinder_netapp_login</name>
          <description>this is currently the user "openstack" as configured on the netapp server</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>cinder_netapp_password</name>
          <description>the password for the user "openstack" as configured on the netapp server</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition plugin="nodelabelparameter@1.5.1">
          <name>label</name>
          <description>Default: openstack-mkcloud | Possible values openstack-mkcloud-SLE11|openstack-mkcloud-SLE12 to build on SLE11 resp. SLE12</description>
          <defaultValue>openstack-mkcloud</defaultValue>
          <allNodesMatchingLabel>false</allNodesMatchingLabel>
          <triggerIfResult>allCases</triggerIfResult>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.24">
      <autoRebuild>false</autoRebuild>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>openstack-mkcloud</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>set -x

# emptying the workspace
mkdir -p empty
rsync -r --delete empty/ ./

export artifacts_dir=$WORKSPACE/.artifacts
rm -rf $artifacts_dir
mkdir -p $artifacts_dir
touch $artifacts_dir/.ignore

export automationrepo=~/github.com/SUSE-Cloud/automation
export debug_qa_crowbarsetup=1
export cephvolumenumber=1 # one disk is either cinder raw, ceph-osd or swift storage
export debug=0
export want_neutronsles12=1
export rally_server=backup.cloudadm.qa.suse.de

case $cloudsource in
    GM4|GM4+up|GM5|GM5+up)
        echo "Not setting want_ldap=1"
        ;;
    *)
        [[ $nodenumber == 2 ]] &amp;&amp; export want_ldap=1
        ;;
esac
   

if [[ $cinder_backend = " " ]] ; then
  cinder_backend=""
fi


# HAcloud
if [[ $hacloud == 1 ]] ; then
  export clusterconfig="data+services+network=2"
  if [[ $nodenumber &lt; 4 ]] ; then
    export nodenumber=4
  fi
  
  # for now disable ceph deployment in HA mode explicitly
  # it would need 5 nodes (2 for the cluster + 3 nodes for compute and ceph)
  export want_ceph=0
  export cephvolumenumber=0
fi



if [ ! -z "$UPDATEREPOS" ] ; then
  # testing update only makes sense with GM and without TESTHEAD
#  unset TESTHEAD
#  export cloudsource=GM
  export UPDATEREPOS=${UPDATEREPOS//$'\n'/+}
fi



if ! [ -e ${automationrepo}/scripts/jenkins/update_automation ] ; then
  mkdir -p ${automationrepo}/scripts/jenkins
  curl -o ${automationrepo}/scripts/jenkins/update_automation https://raw.githubusercontent.com/SUSE-Cloud/automation/master/scripts/jenkins/update_automation
  chmod a+x ${automationrepo}/scripts/jenkins/update_automation
fi
# fetch the latest automation updates
${automationrepo}/scripts/jenkins/update_automation #NO PARAMETERS HERE ANY MORE!!!


function selfgating_trap()
{
  $ghs -a set-status -s "failure" -t $BUILD_URL -c $automation_pr_sha
}

## mkcloud self-gating
if [[ $automation_pr ]] ; then
  automation_pr_sha=${automation_pr##*:}
  automation_pr_id=${automation_pr%%:*}
  ghs=${automationrepo}/scripts/github-status/github-status.rb
  
  if ! $ghs -a is-latest-sha -p $automation_pr_id -c $automation_pr_sha ; then
    $ghs -a set-status -s "error" -t $BUILD_URL -c $automation_pr_sha -m "Latest SHA1 from PR does not match this SHA1"
    exit 1
  fi
    
  trap "selfgating_trap" ERR
  automationrepo_orig=$automationrepo
  pr_dir=`mktemp -d $WORKSPACE/SUSE-Cloud.automation.XXXXXX`
  automationrepo=$pr_dir/automation

  mkdir -p $automationrepo
  rsync -a ${automationrepo_orig%/}/ $automationrepo/
  pushd $automationrepo
  ghremote=origin
  git config --get-all remote.${ghremote}.fetch | grep -q pull || \
    git config --add remote.${ghremote}.fetch "+refs/pull/*/head:refs/remotes/${ghremote}/pr/*"
  git fetch $ghremote
  git checkout -t $ghremote/pr/$automation_pr_id
  #temporary workaround for unrebased PRs:
  if [ ! -e $ghs ] ; then
    git merge master
  fi
  popd
    
  $ghs -a set-status -s "pending" -t $BUILD_URL -c $automation_pr_sha
fi


echo "########################################################################"
env
echo "########################################################################"

MKCLOUDTARGET=$mkcloudtarget
[ $UPDATEBEFOREINSTALL == "true" ] &amp;&amp; MKCLOUDTARGET='cleanup prepare setupadmin addupdaterepo instcrowbar setupcompute instcompute proposal testsetup'
if [ $WITHCROWBARREGISTER == "true" ] ; then
  export nodenumberlonelynode=1
  MKCLOUDTARGET="$MKCLOUDTARGET setuplonelynodes crowbar_register"
fi

if [ -e mkcloud.pid ] ; then
    kill -KILL -`mkcloud.pid` ||: # make sure that the previous mkcloud (and subprocesses) are dead
fi
starttime=`date +%s`
perl -e "alarm 4*60*60 ; exec '${automationrepo}/scripts/mkcloudhost/allocpool bash -x ${automationrepo}/scripts/mkcloud setuphost $(echo -n $MKCLOUDTARGET) ' " | tee $artifacts_dir/mkcloud_short_stdout.log
ret=${PIPESTATUS[0]}
if [[ $ret != 0 ]] ; then
    [[ ! $automation_pr ]] || selfgating_trap
    echo "mkcloud ret=$ret"
    exit $ret # check return code before tee
fi

# report self-gating status
if [[ $automation_pr_sha ]] ; then
  $ghs -a set-status -s "success" -t $BUILD_URL -c $automation_pr_sha
  trap "-" ERR
fi

[[ $TESTHEAD ]] || exit 0
[[ ! $hacloud  ]] || exit 0  # for now disable package submission for ha setups
[[ ! $automation_pr ]] || exit 0 # TODO: verify


if [[ $mode == "basetest" ]] ; then
    echo "$mode succeeded - triggering extra tests"
    d=/root/lasttriggered
    f=$d/$cloudsource
    last=$(cat $f || echo 0)
    echo "if [[ $(($last + 1800)) -gt $(date +%s) ]] ; then echo we just triggered ... skipping ; exit 0 ; fi"
    mkdir -p $d
    date +%s &gt; $f
    extra=""
    case $cloudsource in
        develcloud5|develcloud6)
            extra="want_sles12=1"
            ;;
    esac
    # linuxbridge+ceph:
    ${automationrepo}/scripts/jenkins/jenkins-job-trigger openstack-mkcloud -p mode=submit cloudsource="${cloudsource}" nodenumber=3 networkingplugin=linuxbridge $extra
fi

[[ $mode == "submit" ]] || exit 0 # only submit on mode=submit


case "$cloudsource" in
  develcloud2.0)
    project=Devel:Cloud:2.0
    subproject=Staging
    packagefilter="crowbar python openstack"
  ;;
  develcloud3)
    project=Devel:Cloud:3
    subproject=Staging
    packagefilter="crowbar python openstack suse-cloud-upgrade"
  ;;
  develcloud4)
    project=Devel:Cloud:4
    subproject=Staging
    packagefilter="crowbar python openstack suse-cloud-upgrade"
  ;;
  develcloud5)
    project=Devel:Cloud:5
    subproject=Staging
    packagefilter="crowbar python openstack suse-cloud-upgrade"
  ;;
  develcloud6)
    project=Devel:Cloud:6
    subproject=Staging
    packagefilter="crowbar python openstack patterns suse-cloud-upgrade"
  ;;
  *)
    echo "nothing to submit"
    exit 0
  ;;
esac


${automationrepo}/scripts/jenkins/jenkins-job-trigger openstack-submit-project -p project="${project}" subproject="${subproject}" packagefilter="${packagefilter}" starttime="${starttime}"</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>.artifacts/**</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
    </hudson.tasks.ArtifactArchiver>
    <hudson.tasks.Mailer plugin="mailer@1.11">
      <recipients>cloud-devel@suse.de</recipients>
      <dontNotifyEveryUnstableBuild>true</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
  </publishers>
  <buildWrappers>
    <hudson.plugins.build__timeout.BuildTimeoutWrapper plugin="build-timeout@1.14.1">
      <strategy class="hudson.plugins.build_timeout.impl.NoActivityTimeOutStrategy">
        <timeoutSecondsString>3600</timeoutSecondsString>
      </strategy>
      <operationList>
        <hudson.plugins.build__timeout.operations.FailOperation/>
      </operationList>
    </hudson.plugins.build__timeout.BuildTimeoutWrapper>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.6.2"/>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.3">
      <template>#${BUILD_NUMBER}: ${ENV,var="cloudsource"} (${ENV,var="nodenumber"}/${ENV,var="networkingplugin"}/${ENV,var="tempestoptions"}/${ENV,var="mkcloudtarget"}/${ENV,var="automation_pr"} ${ENV,var="hacloud"})</template>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>
