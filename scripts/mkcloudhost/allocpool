#!/usr/bin/perl -w
# allocate one test dir from a pool and run mkcloud
use strict;
use Time::HiRes qw(sleep);
use Fcntl qw(:DEFAULT :flock);

my $allocname="tmpqueuesched.pid";
# Take the oldest directory
my @dirs= sort { (stat("$a/$allocname"))[9] <=>
                 (stat("$b/$allocname"))[9] } (</root/pool/?>,</root/pool/??>);

#print "@dirs\n";

sub diag($) {print "@_\n"}

sleep(rand(2)); # reduce chance of collisions with make -j

# lock+select testdir
my $found=0;
foreach my $d (@dirs) {
	# use own allocation lock protocol
	my $a="$d/$allocname";
	sysopen my $fh, $a, O_RDWR|O_CREAT or die "cant create $a";
	flock $fh, LOCK_EX or next;
	my $num = <$fh>;
	if($num && $num=~m/^\d{1,5}$/) {
		my $signalled=kill(0, $num);
                diag "PID file had $num";
		if($signalled) {
			diag "someone else owns $a and is alive";
			next;
		}
	}
	# process is dead => cleanup
	seek $fh, 0, 0 or die "can't rewind numfile: $!";
	truncate $fh, 0 or die "can't truncate numfile: $!";
	print $fh "$$\n";
	close($fh);
	diag "Wrote new PID file with $$";
	$ENV{testdir}=$d;
	$found=1;
	last;
}
if(!$found) {die "all dirs (@dirs) are currently in use"}
print "using testdir=$ENV{testdir}\n";
exec("/root/mkcloude", @ARGV);
die "exec failed: $!";
